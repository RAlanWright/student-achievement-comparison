{"version":3,"sources":["config/firebase.js","components/InternetGraph.js","components/PastFailures.js","components/StudyTime.js","components/HealthGraph.js","components/TravelTime.js","components/Absent.js","components/GoOut.js","components/ExtraPaidClassesGraph.js","components/AlcoholConsumption.js","components/DataFetch.js","index.js"],"names":["app","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","InternetGraph","props","data","name","averageWithInternet","accessAvg","showAccess","averageWithoutInternet","noAccessAvg","showNoAccess","Container","className","Row","Col","BarChart","width","height","margin","top","right","left","bottom","style","fontSize","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Label","value","angle","position","Tooltip","Legend","Bar","studentCountWithoutAccess","stackId","fill","background","barSize","LabelList","studentCountWithAccess","PastFailures","data1","g1","g1Grade","g2","g2Grade","g3","g3Grade","layout","type","offset","studentCount","verticalAlign","align","StudyTime","groupOneStudents","studyTimeGrade","groupTwoStudents","groupThreeStudents","groupFourStudents","colors","PieChart","Pie","cx","cy","outerRadius","innerRadius","label","map","entry","index","Cell","HealthGraph","g1Average","g2Average","g3Average","studyTime","interval","TravelTime","students","AbsenceGraph","Object","keys","grades","key","average","ScatterChart","Scatter","cursor","GoOut","grade","RadialBarChart","startAngle","endAngle","RadialBar","minAngle","clockWise","iconSize","wrapperStyle","lineHeight","ExtraPaidClassesGraph","averageWithExtraPaidClasses","extraPaidClassesAvg","showExtraPaidClasses","averageWithoutExtraPaidClasses","noExtraPaidClassesAvg","showNoExtraPaidClasses","studentCountWithExtraPaidClasses","studentCountWithoutExtraPaidClasses","AlcoholConsumption","dataDalc","g1AverageDalc","g2AverageDalc","g3AverageDalc","dataWalc","g1AverageWalc","g2AverageWalc","g3AverageWalc","DataFetch","toggle","setState","dropdownOpen","state","activeGraphIndex","noInternetAccessAvg","internetAccessAvg","studentCountForPastFailure","g1GradeFailure","g2GradeFailure","g3GradeFailure","avgGradeForStudyTime","studentCountForStudyTime","firstPeriodAverage","secondPeriodAverage","finalPeriodAverage","studyTimeHealth","studentCountForHealth","g1GradeTravelTime","g2GradeTravelTime","g3GradeTravelTime","travelTimeStudentCount","absenceAverage","goOutAvg","workdayAlcoholCount","weekendAlcoholCount","noAlcoholCount","workDayAlcoholAvg","weekendAlcoholAvg","internetAccess","bind","handleGraphChange","checkPastFailures","checkStudyTime","healthCorrelationToGrade","affectedByHealth","travelTime","checkAbsences","goOutTest","extraPaidClasses","alcoholConsumption","_this","this","queryArray","ref","once","then","snapshot","forEach","childSnapshot","push","val","reducer","a","b","parseInt","noInternet","hasInternet","item","internet","G3","sumForNoInternet","reduce","roundedGrade1","Math","round","length","sumForInternet","roundedGrade2","failures","G1","G2","i","JSON","parse","acc","entries","filterQuery","curr","studytime","firstPeriodGrade","secondPeriodGrade","finalGrade","health","firstPeriodGradeDalc","secondPeriodGradeDalc","finalGradeDalc","firstPeriodGradeWalc","secondPeriodGradeWalc","finalGradeWalc","Dalc","Walc","firstPeriodAverageDalc","secondPeriodAverageDalc","finalPeriodAverageDalc","firstPeriodAverageWalc","secondPeriodAverageWalc","finalPeriodAverageWalc","traveltime","absenceGrade","absences","goOutGrade","goout","noExtraPaidClasses","paid","sumForExtraPaidClasses","sumForNoExtraPaidClasses","graphs","component","activeGraph","ButtonDropdown","isOpen","DropdownToggle","caret","DropdownMenu","graph","DropdownItem","onClick","Component","App","fluid","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6f6b96e4.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\n// https://firebase.google.com/docs/web/setup#available-libraries\n\nconst firebaseConfig = {\n    apiKey: 'AIzaSyBL7_C48_5DuMjMJ1eDRx_xxeB_L-S5-H4',\n    authDomain: 'gmt-assignment.firebaseapp.com',\n    databaseURL: 'https://gmt-assignment-default-rtdb.firebaseio.com/',\n    projectId: 'gmt-assignment',\n    storageBucket: 'gmt-assignment.appspot.com',\n    messagingSenderId: '532049500680',\n    appId: '1:532049500680:web:e0955543b3ace7e6c64fbd',\n    measurementId: 'G-922B5JWL94',\n};\n\n// Initialize Firebase\nconst app = firebase.initializeApp(firebaseConfig);\n\n// Initialize database\nconst database = firebase.database();\n\nexport default { app, database };\n","import {\n    BarChart,\n    Bar,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    LabelList,\n    Label,\n} from 'recharts';\nimport { Container, Col, Row } from 'reactstrap';\n\nconst InternetGraph = (props) => {\n    const data = [\n        {\n            name: 'Internet Access',\n            averageWithInternet: props.accessAvg,\n            showAccess: props.accessAvg,\n        },\n        {\n            name: 'No Internet Access',\n            averageWithoutInternet: props.noAccessAvg,\n            showNoAccess: props.noAccessAvg,\n        },\n        {\n            name: 'Comparison',\n            averageWithInternet: props.accessAvg,\n            averageWithoutInternet: props.noAccessAvg,\n        },\n    ];\n\n    return (\n        <div>\n            <Container className=\"d-flex justify-content-center\">\n                <Row>\n                    <Col>\n                        <h3 className=\"title-center\">Internet Access</h3>\n                        <BarChart\n                            width={1000}\n                            height={500}\n                            data={data}\n                            margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                            style={{ fontSize: 20 }}\n                        >\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"name\" />\n                            <YAxis>\n                                <Label\n                                    value=\"average grade\"\n                                    angle={-90}\n                                    position=\"insideLeft\"\n                                />\n                            </YAxis>\n\n                            <Tooltip />\n                            <Legend />\n                            <Bar\n                                name={\n                                    props.studentCountWithoutAccess +\n                                    ' students w/o internet'\n                                }\n                                dataKey=\"averageWithoutInternet\"\n                                stackId=\"a\"\n                                fill=\"#7DAB24\"\n                                background={{ fill: '#eee' }}\n                                barSize={80}\n                            >\n                                <LabelList\n                                    dataKey=\"showNoAccess\"\n                                    position=\"top\"\n                                />\n                            </Bar>\n\n                            <Bar\n                                name={\n                                    props.studentCountWithAccess +\n                                    ' students w/ internet'\n                                }\n                                dataKey=\"averageWithInternet\"\n                                stackId=\"a\"\n                                fill=\"#141213\"\n                            >\n                                <LabelList\n                                    dataKey=\"showAccess\"\n                                    position=\"top\"\n                                />\n                            </Bar>\n                        </BarChart>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n};\n\nexport default InternetGraph;\n","import {\n    CartesianGrid,\n    XAxis,\n    YAxis,\n    Legend,\n    Tooltip,\n    LabelList,\n    Bar,\n    BarChart,\n    Label,\n} from 'recharts';\nimport { Container, Row, Col } from 'reactstrap';\n\nconst PastFailures = (props) => {\n    const data1 = [\n        {\n            name: 0,\n            g1: props.g1Grade[0],\n            g2: props.g2Grade[0],\n            g3: props.g3Grade[0],\n        },\n        {\n            name: 1,\n            g1: props.g1Grade[1],\n            g2: props.g2Grade[1],\n            g3: props.g3Grade[1],\n        },\n        {\n            name: 2,\n            g1: props.g1Grade[2],\n            g2: props.g2Grade[2],\n            g3: props.g3Grade[2],\n        },\n        {\n            name: 3,\n            g1: props.g1Grade[3],\n            g2: props.g2Grade[3],\n            g3: props.g3Grade[3],\n        },\n    ];\n\n    return (\n        <Container className=\"d-flex justify-content-center\">\n            <Row>\n                <Col>\n                    <h3 className=\"title-center\">Past Failuires</h3>\n                    <BarChart\n                        width={1300}\n                        height={500}\n                        data={data1}\n                        layout=\"vertical\"\n                        margin={{ top: 20, bottom: 130, left: 30 }}\n                        style={{ fontSize: 20 }}\n                    >\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis type=\"number\">\n                            <Label\n                                value=\"average grade\"\n                                offset={0}\n                                position=\"bottom\"\n                                style={{ fontSize: 20 }}\n                            />\n\n                            <Label\n                                value={\n                                    props.studentCount[0] + ' students - (0)'\n                                }\n                                offset={40}\n                                position=\"bottom\"\n                                style={{ fontSize: 20 }}\n                            />\n                            <Label\n                                value={\n                                    props.studentCount[1] + ' students - (1)'\n                                }\n                                offset={60}\n                                position=\"bottom\"\n                                style={{ fontSize: 20 }}\n                            />\n                            <Label\n                                value={\n                                    props.studentCount[2] + ' students - (2)'\n                                }\n                                offset={80}\n                                position=\"bottom\"\n                                style={{ fontSize: 20 }}\n                            />\n                            <Label\n                                value={\n                                    props.studentCount[3] + ' students - (3)'\n                                }\n                                offset={100}\n                                position=\"bottom\"\n                                style={{ fontSize: 20 }}\n                            />\n                        </XAxis>\n                        <YAxis dataKey=\"name\" type=\"category\">\n                            <Label\n                                value=\"past failures\"\n                                angle={-90}\n                                position=\"insideLeft\"\n                                style={{ fontSize: 25 }}\n                            />\n                        </YAxis>\n                        <Tooltip />\n                        <Legend\n                            verticalAlign=\"middle\"\n                            layout=\"vertical\"\n                            align=\"right\"\n                        />\n\n                        <Bar\n                            name=\"1st Period Grade\"\n                            dataKey=\"g1\"\n                            fill=\"#cc0000\"\n                            barSize={70}\n                        >\n                            <LabelList\n                                dataKey=\"g1\"\n                                position=\"inside\"\n                                style={{ fontSize: 20 }}\n                            />\n                        </Bar>\n\n                        <Bar\n                            name=\"2nd Period Grade\"\n                            dataKey=\"g2\"\n                            fill=\"#ff1a1a\"\n                            barSize={70}\n                        >\n                            <LabelList\n                                dataKey=\"g2\"\n                                position=\"inside\"\n                                style={{ fontSize: 20 }}\n                            />\n                        </Bar>\n\n                        <Bar\n                            name=\"Final Grade\"\n                            dataKey=\"g3\"\n                            fill=\"#ff8080\"\n                            barSize={70}\n                        >\n                            <LabelList\n                                dataKey=\"g3\"\n                                position=\"inside\"\n                                style={{ fontSize: 20 }}\n                            />\n                        </Bar>\n                    </BarChart>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default PastFailures;\n","import { PieChart, Pie, Cell, Tooltip, Legend, Label } from 'recharts';\nimport { Container, Row, Col } from 'reactstrap';\n\nconst StudyTime = (props) => {\n    const groupOneStudents = props.studyTimeGrade[1];\n    const groupTwoStudents = props.studyTimeGrade[2];\n    const groupThreeStudents = props.studyTimeGrade[3];\n    const groupFourStudents = props.studyTimeGrade[4];\n\n    const colors = ['#0a47a9', '#2674f2', ' #6ea3f7', '#010a18'];\n\n    const data = [\n        {\n            name: props.studentCount[1] + ' students, <2 hrs',\n            value: groupOneStudents,\n        },\n        {\n            name: props.studentCount[2] + ' students, 2 - 5 hrs',\n            value: groupTwoStudents,\n        },\n        {\n            name: props.studentCount[3] + ' students, 5 - 10 hrs',\n            value: groupThreeStudents,\n        },\n        {\n            name: props.studentCount[4] + ' students, >10 hrs',\n            value: groupFourStudents,\n        },\n    ];\n\n    return (\n        <Container className=\"d-flex justify-content-center\">\n            <Row>\n                <Col>\n                    <h3 className=\"title-center\">Study Time</h3>\n                    <PieChart width={730} height={250} style={{ fontSize: 25 }}>\n                        <Pie\n                            data={data}\n                            cx=\"50%\"\n                            cy=\"50%\"\n                            dataKey=\"value\"\n                            outerRadius={80}\n                            innerRadius={60}\n                            label\n                        >\n                            {data.map((entry, index) => (\n                                <Cell\n                                    key={`cell-${index}`}\n                                    fill={colors[index]}\n                                />\n                            ))}\n\n                            <Label\n                                value=\"avg grade\"\n                                position=\"center\"\n                                style={{ fontSize: 20 }}\n                            />\n                        </Pie>\n                        <Tooltip />\n                        <Legend\n                            verticalAlign=\"middle\"\n                            layout=\"vertical\"\n                            align=\"right\"\n                        />\n                    </PieChart>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default StudyTime;\n","import {\n    BarChart,\n    CartesianGrid,\n    XAxis,\n    YAxis,\n    Tooltip,\n    Legend,\n    Bar,\n    Label,\n    PieChart,\n    Pie,\n    Cell,\n    LabelList,\n} from 'recharts';\nimport { Container, Row, Col } from 'reactstrap';\n\nconst HealthGraph = (props) => {\n    const colors = ['#000000', '#333333', '  #666666', '#999999', ' #bfbfbf'];\n\n    const data1 = [\n        {\n            name: 1,\n            g1: props.g1Average[1],\n            g2: props.g2Average[1],\n            g3: props.g3Average[1],\n        },\n        {\n            name: 2,\n            g1: props.g1Average[2],\n            g2: props.g2Average[2],\n            g3: props.g3Average[2],\n        },\n        {\n            name: 3,\n            g1: props.g1Average[3],\n            g2: props.g2Average[3],\n            g3: props.g3Average[3],\n        },\n        {\n            name: 4,\n            g1: props.g1Average[4],\n            g2: props.g2Average[4],\n            g3: props.g3Average[4],\n        },\n        {\n            name: 5,\n            g1: props.g1Average[5],\n            g2: props.g2Average[5],\n            g3: props.g3Average[5],\n        },\n    ];\n\n    const data = [\n        {\n            name: props.studentCount[1] + ' students (1)',\n            value: props.studyTime[1],\n        },\n        {\n            name: props.studentCount[2] + ' students (2)',\n            value: props.studyTime[2],\n        },\n        {\n            name: props.studentCount[3] + ' students (3)',\n            value: props.studyTime[3],\n        },\n        {\n            name: props.studentCount[4] + ' students (4)',\n            value: props.studyTime[4],\n        },\n        {\n            name: props.studentCount[5] + ' students (5)',\n            value: props.studyTime[5],\n        },\n    ];\n\n    return (\n        <div>\n            <Container className=\"d-flex justify-content-center\">\n                <Row>\n                    <Col>\n                        <h3 className=\"title-center\">Overall Health</h3>\n                        <BarChart\n                            width={1000}\n                            height={400}\n                            data={data1}\n                            margin={{ bottom: 60 }}\n                            style={{ fontSize: 18 }}\n                        >\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"name\">\n                                <Label\n                                    value=\"health ranked from the worst, 1 to the best, 5\"\n                                    offset={0}\n                                    position=\"bottom\"\n                                    style={{ fontSize: 20 }}\n                                />\n                            </XAxis>\n                            <YAxis interval={0}>\n                                <Label\n                                    value=\"average grade\"\n                                    angle={-90}\n                                    position=\"insideLeft\"\n                                    style={{ fontSize: 20 }}\n                                />\n                            </YAxis>\n                            <Tooltip />\n                            <Legend\n                                verticalAlign=\"middle\"\n                                layout=\"vertical\"\n                                align=\"right\"\n                            />\n                            <Bar\n                                name=\"1st Period Grade\"\n                                dataKey=\"g1\"\n                                fill=\"#008000\"\n                                barSize={70}\n                            >\n                                <LabelList dataKey=\"g1\" position=\"top\" />\n                            </Bar>\n\n                            <Bar\n                                name=\"2nd Period Grade\"\n                                dataKey=\"g2\"\n                                fill=\" #00b300\"\n                                barSize={70}\n                            >\n                                <LabelList dataKey=\"g2\" position=\"top\" />\n                            </Bar>\n\n                            <Bar\n                                name=\"Final Grade\"\n                                dataKey=\"g3\"\n                                fill=\"#1aff1a\"\n                                barSize={70}\n                            >\n                                <LabelList dataKey=\"g3\" position=\"top\" />\n                            </Bar>\n                        </BarChart>\n\n                        <h3 className=\"title-center\">\n                            Study Time Impact On Health\n                        </h3>\n                        <PieChart\n                            width={730}\n                            height={250}\n                            style={{ fontSize: 20 }}\n                        >\n                            <Pie\n                                data={data}\n                                cx=\"50%\"\n                                cy=\"50%\"\n                                dataKey=\"value\"\n                                outerRadius={80}\n                                innerRadius={60}\n                                label\n                            >\n                                {data.map((entry, index) => (\n                                    <Cell\n                                        key={`cell-${index}`}\n                                        fill={colors[index]}\n                                    />\n                                ))}\n\n                                <Label\n                                    value=\"study time\"\n                                    position=\"center\"\n                                    style={{ fontSize: 20 }}\n                                />\n                            </Pie>\n                            <Tooltip />\n                            <Legend\n                                verticalAlign=\"middle\"\n                                layout=\"vertical\"\n                                align=\"right\"\n                            />\n                        </PieChart>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n};\n\nexport default HealthGraph;\n","import {\n    CartesianGrid,\n    XAxis,\n    YAxis,\n    Label,\n    Tooltip,\n    BarChart,\n    Bar,\n    LabelList,\n    Legend,\n} from 'recharts';\nimport { Container, Row, Col } from 'reactstrap';\n\nconst TravelTime = (props) => {\n    const data = [\n        {\n            name: 1,\n            g1: props.g1Grade[1],\n            g2: props.g2Grade[1],\n            g3: props.g3Grade[1],\n        },\n        {\n            name: 2,\n            g1: props.g1Grade[2],\n            g2: props.g2Grade[2],\n            g3: props.g3Grade[2],\n        },\n        {\n            name: 3,\n            g1: props.g1Grade[3],\n            g2: props.g2Grade[3],\n            g3: props.g3Grade[3],\n        },\n        {\n            name: 4,\n            g1: props.g1Grade[4],\n            g2: props.g2Grade[4],\n            g3: props.g3Grade[4],\n        },\n    ];\n\n    return (\n        <Container className=\"d-flex justify-content-center\">\n            <Row>\n                <Col>\n                    <h3 className=\"title-center\">Travel Time</h3>\n                    <BarChart\n                        width={1000}\n                        height={400}\n                        data={data}\n                        margin={{ bottom: 80 }}\n                        style={{ fontSize: 18 }}\n                    >\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"name\">\n                            <Label\n                                value={\n                                    props.students[1] +\n                                    ' students; travel-time: <15 min (1)'\n                                }\n                                offset={0}\n                                position=\"bottom\"\n                                style={{ fontSize: 20 }}\n                            />\n                            <Label\n                                value={\n                                    props.students[2] +\n                                    ' students; travel-time: 15 to 30 min (2)'\n                                }\n                                offset={20}\n                                position=\"bottom\"\n                                style={{ fontSize: 20 }}\n                            />\n                            <Label\n                                value={\n                                    props.students[3] +\n                                    ' students; travel-time: 30 min to 1 hr (3)'\n                                }\n                                offset={40}\n                                position=\"bottom\"\n                                style={{ fontSize: 20 }}\n                            />\n                            <Label\n                                value={\n                                    props.students[4] +\n                                    ' students; travel-time: >1 hr (4)'\n                                }\n                                offset={60}\n                                position=\"bottom\"\n                                style={{ fontSize: 20 }}\n                            />\n                        </XAxis>\n                        <YAxis>\n                            <Label\n                                value=\"average grade\"\n                                angle={-90}\n                                position=\"insideLeft\"\n                                style={{ fontSize: 20 }}\n                            />\n                        </YAxis>\n                        <Tooltip />\n                        <Legend\n                            verticalAlign=\"middle\"\n                            layout=\"vertical\"\n                            align=\"right\"\n                        />\n                        <Bar\n                            name=\"1st Period Grade\"\n                            dataKey=\"g1\"\n                            fill=\" #0000ff\"\n                            barSize={70}\n                        >\n                            <LabelList dataKey=\"g1\" position=\"top\" />\n                        </Bar>\n\n                        <Bar\n                            name=\"2nd Period Grade\"\n                            dataKey=\"g2\"\n                            fill=\" #6666ff\"\n                            barSize={70}\n                        >\n                            <LabelList dataKey=\"g2\" position=\"top\" />\n                        </Bar>\n\n                        <Bar\n                            name=\"Final Grade\"\n                            dataKey=\"g3\"\n                            fill=\"#ccccff\"\n                            barSize={70}\n                        >\n                            <LabelList dataKey=\"g3\" position=\"top\" />\n                        </Bar>\n                    </BarChart>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default TravelTime;\n","import {\n    CartesianGrid,\n    XAxis,\n    YAxis,\n    Tooltip,\n    Scatter,\n    ScatterChart,\n    Label,\n} from 'recharts';\nimport { Container, Row, Col } from 'reactstrap';\n\nconst AbsenceGraph = (props) => {\n    const data = Object.keys(props.grades).map((key) => ({\n        name: key,\n        average: props.grades[key],\n    }));\n\n    return (\n        <Container className=\"d-flex justify-content-center\">\n            <Row>\n                <Col>\n                    <h3 className=\"title-center\">Absence Correlation</h3>\n                    <ScatterChart\n                        width={1300}\n                        height={500}\n                        margin={{ top: 20, right: 20, bottom: 30, left: 20 }}\n                        style={{ fontSize: 20 }}\n                    >\n                        <CartesianGrid />\n                        <XAxis dataKey={'name'} name=\"absences\">\n                            <Label\n                                value=\"absences\"\n                                offset={2}\n                                position=\"bottom\"\n                                style={{ fontSize: 25 }}\n                            />\n                        </XAxis>\n                        <YAxis dataKey={'average'} name=\"average grade\">\n                            <Label\n                                value=\"average grade\"\n                                angle={-90}\n                                position=\"left\"\n                                style={{ fontSize: 25 }}\n                            />\n                        </YAxis>\n                        <Scatter name=\"averages\" data={data} fill=\"#8884d8\" />\n                        <Tooltip cursor={{ strokeDasharray: '3 3' }} />\n                    </ScatterChart>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default AbsenceGraph;\n","import { RadialBar, RadialBarChart, Legend } from 'recharts';\nimport { Container, Row, Col } from 'reactstrap';\n\nconst GoOut = (props) => {\n    const data = [\n        {\n            name: '1, very low frequency',\n            average: props.grade[1],\n            fill: '#8884d8',\n        },\n        {\n            name: 2,\n            average: props.grade[2],\n            fill: '#83a6ed',\n        },\n        {\n            name: 3,\n            average: props.grade[3],\n            fill: '#8dd1e1',\n        },\n        {\n            name: 4,\n            average: props.grade[4],\n            fill: '#82ca9d',\n        },\n        {\n            name: '5, very high frequency',\n            average: props.grade[5],\n            fill: '#ff6666',\n        },\n    ];\n\n    const style = {\n        top: 50,\n        left: 600,\n        lineHeight: '24px',\n    };\n\n    return (\n        <Container className=\"d-flex justify-content-center\">\n            <Row>\n                <Col>\n                    <h3 className=\"title-center\">Going Out With Friends</h3>\n                    <RadialBarChart\n                        width={800}\n                        height={500}\n                        cx={300}\n                        cy={400}\n                        innerRadius={'10%'}\n                        outerRadius={'300'}\n                        barSize={'16'}\n                        data={data}\n                        startAngle={180}\n                        endAngle={0}\n                        style={{ fontSize: 25 }}\n                        margin={{ right: 1000 }}\n                    >\n                        <RadialBar\n                            minAngle={15}\n                            label={{ fill: '#222' }}\n                            background\n                            clockWise={true}\n                            dataKey=\"average\"\n                        />\n                        <Legend\n                            iconSize={10}\n                            width={400}\n                            height={140}\n                            layout=\"vertical\"\n                            verticalAlign=\"middle\"\n                            wrapperStyle={style}\n                        />\n                    </RadialBarChart>\n\n                    <p className=\"h2 d-flex justify-content-center\">\n                        Average Grades\n                    </p>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default GoOut;\n","import {\n    BarChart,\n    Bar,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    LabelList,\n    Label,\n} from 'recharts';\nimport { Container, Col, Row } from 'reactstrap';\n\nconst ExtraPaidClassesGraph = (props) => {\n    const data = [\n        {\n            name: 'Extra Paid Classes',\n            averageWithExtraPaidClasses: props.extraPaidClassesAvg,\n            showExtraPaidClasses: props.extraPaidClassesAvg,\n        },\n        {\n            name: 'No Extra Paid Classes',\n            averageWithoutExtraPaidClasses: props.noExtraPaidClassesAvg,\n            showNoExtraPaidClasses: props.noExtraPaidClassesAvg,\n        },\n        {\n            name: 'Comparison',\n            averageWithExtraPaidClasses: props.extraPaidClassesAvg,\n            averageWithoutExtraPaidClasses: props.noExtraPaidClassesAvg,\n        },\n    ];\n\n    return (\n        <div>\n            <Container className=\"d-flex justify-content-center\">\n                <Row>\n                    <Col>\n                        <h3 className=\"title-center\">Extra Paid Classes</h3>\n                        <BarChart\n                            width={1000}\n                            height={450}\n                            data={data}\n                            margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                            style={{ fontSize: 20 }}\n                        >\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"name\" />\n                            <YAxis>\n                                <Label\n                                    value=\"average grade\"\n                                    angle={-90}\n                                    position=\"insideLeft\"\n                                />\n                            </YAxis>\n\n                            <Tooltip />\n                            <Legend />\n                            <Bar\n                                name={\n                                    props.studentCountWithExtraPaidClasses +\n                                    ' students w/ extra paid classes'\n                                }\n                                dataKey=\"averageWithExtraPaidClasses\"\n                                stackId=\"a\"\n                                fill=\"#7DAB24\"\n                                background={{ fill: '#eee' }}\n                                barSize={80}\n                            >\n                                <LabelList\n                                    dataKey=\"showExtraPaidClasses\"\n                                    position=\"top\"\n                                />\n                            </Bar>\n                            <Bar\n                                name={\n                                    props.studentCountWithoutExtraPaidClasses +\n                                    ' students w/o extra paid classes'\n                                }\n                                dataKey=\"averageWithoutExtraPaidClasses\"\n                                stackId=\"a\"\n                                fill=\"#141213\"\n                            >\n                                <LabelList\n                                    dataKey=\"showNoExtraPaidClasses\"\n                                    position=\"top\"\n                                />\n                            </Bar>\n                        </BarChart>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n};\n\nexport default ExtraPaidClassesGraph;\n","import {\n    BarChart,\n    CartesianGrid,\n    XAxis,\n    YAxis,\n    Tooltip,\n    Legend,\n    Bar,\n    Label,\n    LabelList,\n} from 'recharts';\nimport { Container, Row, Col } from 'reactstrap';\n\nconst AlcoholConsumption = (props) => {\n    const dataDalc = [\n        {\n            name: 1,\n            g1: props.g1AverageDalc[1],\n            g2: props.g2AverageDalc[1],\n            g3: props.g3AverageDalc[1],\n        },\n        {\n            name: 2,\n            g1: props.g1AverageDalc[2],\n            g2: props.g2AverageDalc[2],\n            g3: props.g3AverageDalc[2],\n        },\n        {\n            name: 3,\n            g1: props.g1AverageDalc[3],\n            g2: props.g2AverageDalc[3],\n            g3: props.g3AverageDalc[3],\n        },\n        {\n            name: 4,\n            g1: props.g1AverageDalc[4],\n            g2: props.g2AverageDalc[4],\n            g3: props.g3AverageDalc[4],\n        },\n        {\n            name: 5,\n            g1: props.g1AverageDalc[5],\n            g2: props.g2AverageDalc[5],\n            g3: props.g3AverageDalc[5],\n        },\n    ];\n\n    const dataWalc = [\n        {\n            name: 1,\n            g1: props.g1AverageWalc[1],\n            g2: props.g2AverageWalc[1],\n            g3: props.g3AverageWalc[1],\n        },\n        {\n            name: 2,\n            g1: props.g1AverageWalc[2],\n            g2: props.g2AverageWalc[2],\n            g3: props.g3AverageWalc[2],\n        },\n        {\n            name: 3,\n            g1: props.g1AverageWalc[3],\n            g2: props.g2AverageWalc[3],\n            g3: props.g3AverageWalc[3],\n        },\n        {\n            name: 4,\n            g1: props.g1AverageWalc[4],\n            g2: props.g2AverageWalc[4],\n            g3: props.g3AverageWalc[4],\n        },\n        {\n            name: 5,\n            g1: props.g1AverageWalc[5],\n            g2: props.g2AverageWalc[5],\n            g3: props.g3AverageWalc[5],\n        },\n    ];\n\n    return (\n        <div>\n            <Container className=\"d-flex justify-content-center\">\n                <Row>\n                    <Col>\n                        <h3 className=\"title-center\">\n                            Workday Alcohol Consumption\n                        </h3>\n                        <BarChart\n                            width={1200}\n                            height={400}\n                            data={dataDalc}\n                            margin={{ bottom: 50, top: 20 }}\n                            style={{ fontSize: 18 }}\n                        >\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"name\">\n                                <Label\n                                    value=\"Low to High alcohol consumption\"\n                                    offset={0}\n                                    position=\"bottom\"\n                                    style={{ fontSize: 20 }}\n                                />\n                            </XAxis>\n                            <YAxis interval={0}>\n                                <Label\n                                    value=\"average grade\"\n                                    angle={-90}\n                                    position=\"insideLeft\"\n                                    style={{ fontSize: 20 }}\n                                />\n                            </YAxis>\n                            <Tooltip />\n                            <Legend\n                                verticalAlign=\"middle\"\n                                layout=\"vertical\"\n                                align=\"right\"\n                            />\n                            <Bar\n                                name=\"1st Period Grade\"\n                                dataKey=\"g1\"\n                                fill=\"#008000\"\n                                barSize={50}\n                            >\n                                <LabelList dataKey=\"g1\" position=\"top\" />\n                            </Bar>\n\n                            <Bar\n                                name=\"2nd Period Grade\"\n                                dataKey=\"g2\"\n                                fill=\" #00b300\"\n                                barSize={50}\n                            >\n                                <LabelList dataKey=\"g2\" position=\"top\" />\n                            </Bar>\n\n                            <Bar\n                                name=\"Final Grade\"\n                                dataKey=\"g3\"\n                                fill=\"#1aff1a\"\n                                barSize={50}\n                            >\n                                <LabelList dataKey=\"g3\" position=\"top\" />\n                            </Bar>\n                        </BarChart>\n                    </Col>\n                    <Col>\n                        <h3 className=\"title-center\">\n                            Weekend Alcohol Consumption\n                        </h3>\n                        <BarChart\n                            width={1200}\n                            height={400}\n                            data={dataWalc}\n                            margin={{ bottom: 50, top: 20 }}\n                            style={{ fontSize: 18 }}\n                        >\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"name\">\n                                <Label\n                                    value=\"Low to High alcohol consumption\"\n                                    offset={0}\n                                    position=\"bottom\"\n                                    style={{ fontSize: 20 }}\n                                />\n                            </XAxis>\n                            <YAxis interval={0}>\n                                <Label\n                                    value=\"average grade\"\n                                    angle={-90}\n                                    position=\"insideLeft\"\n                                    style={{ fontSize: 20 }}\n                                />\n                            </YAxis>\n                            <Tooltip />\n                            <Legend\n                                verticalAlign=\"middle\"\n                                layout=\"vertical\"\n                                align=\"right\"\n                            />\n                            <Bar\n                                name=\"1st Period Grade\"\n                                dataKey=\"g1\"\n                                fill=\"#008000\"\n                                barSize={50}\n                            >\n                                <LabelList dataKey=\"g1\" position=\"top\" />\n                            </Bar>\n\n                            <Bar\n                                name=\"2nd Period Grade\"\n                                dataKey=\"g2\"\n                                fill=\" #00b300\"\n                                barSize={50}\n                            >\n                                <LabelList dataKey=\"g2\" position=\"top\" />\n                            </Bar>\n\n                            <Bar\n                                name=\"Final Grade\"\n                                dataKey=\"g3\"\n                                fill=\"#1aff1a\"\n                                barSize={50}\n                            >\n                                <LabelList dataKey=\"g3\" position=\"top\" />\n                            </Bar>\n                        </BarChart>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n};\n\nexport default AlcoholConsumption;\n","import { Component } from 'react';\nimport database from '../config/firebase.js';\nimport InternetGraph from './InternetGraph';\nimport PastFailures from './PastFailures';\nimport StudyTime from './StudyTime';\nimport HealthGraph from './HealthGraph';\nimport TravelTime from './TravelTime';\nimport AbsenceGraph from './Absent';\nimport GoOut from './GoOut';\nimport ExtraPaidClassesGraph from './ExtraPaidClassesGraph';\nimport AlcoholConsumption from './AlcoholConsumption.js';\nimport {\n    ButtonDropdown,\n    DropdownToggle,\n    DropdownItem,\n    DropdownMenu,\n} from 'reactstrap';\n\n/* eslint-disable */\nclass DataFetch extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            activeGraphIndex: -1,\n            noInternetAccessAvg: 0,\n            internetAccessAvg: 0,\n            studentCountWithAccess: 0,\n            studentCountWithoutAccess: 0,\n            dropdownOpen: false,\n            studentCountForPastFailure: {},\n            g1GradeFailure: {},\n            g2GradeFailure: {},\n            g3GradeFailure: {},\n            avgGradeForStudyTime: {},\n            studentCountForStudyTime: {},\n            firstPeriodAverage: {},\n            secondPeriodAverage: {},\n            finalPeriodAverage: {},\n            studyTimeHealth: {},\n            studentCountForHealth: {},\n            g1GradeTravelTime: {},\n            g2GradeTravelTime: {},\n            g3GradeTravelTime: {},\n            travelTimeStudentCount: {},\n            absenceAverage: {},\n            goOutAvg: {},\n            extraPaidClassesAvg: 0,\n            noExtraPaidClassesAvg: 0,\n            studentCountWithExtraPaidClasses: 0,\n            studentCountWithoutExtraPaidClasses: 0,\n            workdayAlcoholCount: {},\n            weekendAlcoholCount: {},\n            noAlcoholCount: {},\n            workDayAlcoholAvg: {},\n            weekendAlcoholAvg: {},\n        };\n        this.internetAccess = this.internetAccess.bind(this);\n        this.handleGraphChange = this.handleGraphChange.bind(this);\n        this.checkPastFailures = this.checkPastFailures.bind(this);\n        this.checkStudyTime = this.checkStudyTime.bind(this);\n        this.healthCorrelationToGrade =\n            this.healthCorrelationToGrade.bind(this);\n        this.affectedByHealth = this.affectedByHealth.bind(this);\n        this.travelTime = this.travelTime.bind(this);\n        this.checkAbsences = this.checkAbsences.bind(this);\n        this.goOutTest = this.goOutTest.bind(this);\n        this.extraPaidClasses = this.extraPaidClasses.bind(this);\n        this.alcoholConsumption = this.alcoholConsumption.bind(this);\n    }\n\n    componentDidMount() {\n        const _this = this;\n        const queryArray = [];\n        const query = database.database.ref();\n\n        query.once('value').then((snapshot) => {\n            snapshot.forEach((childSnapshot) => {\n                queryArray.push(childSnapshot.val());\n            });\n            _this.internetAccess(queryArray);\n            _this.checkPastFailures(queryArray);\n            _this.checkStudyTime(queryArray);\n            _this.healthCorrelationToGrade(queryArray);\n            _this.affectedByHealth(queryArray);\n            _this.travelTime(queryArray);\n            _this.checkAbsences(queryArray);\n            _this.goOutTest(queryArray);\n            _this.extraPaidClasses(queryArray);\n            _this.alcoholConsumption(queryArray);\n        });\n    }\n\n    handleGraphChange(value) {\n        this.setState({ activeGraphIndex: value });\n    }\n\n    toggle = () => {\n        this.setState({\n            dropdownOpen: !this.state.dropdownOpen,\n        });\n    };\n\n    internetAccess(queryArray) {\n        const reducer = (a, b) => parseInt(a) + parseInt(b);\n        const noInternet = [];\n        const hasInternet = [];\n\n        queryArray.forEach((item) => {\n            if (item.internet === '\"no\"') {\n                noInternet.push(item.G3);\n            }\n\n            if (item.internet === '\"yes\"') {\n                hasInternet.push(item.G3);\n            }\n        });\n\n        const sumForNoInternet = noInternet.reduce(reducer);\n\n        const roundedGrade1 =\n            Math.round((sumForNoInternet / noInternet.length) * 10) / 10;\n\n        const sumForInternet = hasInternet.reduce(reducer);\n\n        const roundedGrade2 =\n            Math.round((sumForInternet / hasInternet.length) * 10) / 10;\n\n        this.setState({\n            noInternetAccessAvg: roundedGrade1,\n            studentCountWithoutAccess: noInternet.length,\n            internetAccessAvg: roundedGrade2,\n            studentCountWithAccess: hasInternet.length,\n        });\n    }\n\n    checkPastFailures(queryArray) {\n        const g1Grade = {};\n        const g2Grade = {};\n        const g3Grade = {};\n        const studentCount = {};\n\n        queryArray.forEach((item) => {\n            if (g1Grade[item.failures] == null) {\n                g1Grade[item.failures] = [];\n            }\n            g1Grade[item.failures].push(item.G1);\n\n            if (g2Grade[item.failures] == null) {\n                g2Grade[item.failures] = [];\n            }\n            g2Grade[item.failures].push(item.G2);\n\n            if (g3Grade[item.failures] == null) {\n                g3Grade[item.failures] = [];\n            }\n            g3Grade[item.failures].push(item.G3);\n        });\n\n        const b = g1Grade[0].map((i) => {\n            return JSON.parse(i);\n        });\n\n        const c = b.reduce((acc, i) => acc + parseInt(JSON.parse(i)), 0);\n\n        for (const [key, value] of Object.entries(g1Grade)) {\n            const g1JSON = g1Grade[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = g1JSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n            const average = sum / value.length;\n            g1Grade[key] = Math.round(average * 10) / 10;\n        }\n\n        for (const [key, value] of Object.entries(g2Grade)) {\n            const g2JSON = g2Grade[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = g2JSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n            const average = sum / value.length;\n            g2Grade[key] = Math.round(average * 10) / 10;\n        }\n\n        for (const [key, value] of Object.entries(g3Grade)) {\n            const g3JSON = g3Grade[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = g3JSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n            const average = sum / value.length;\n            g3Grade[key] = Math.round(average * 10) / 10;\n        }\n\n        for (const item of queryArray) {\n            if (studentCount[item.failures] != null) {\n                studentCount[item.failures]++;\n            } else {\n                studentCount[item.failures] = 1;\n            }\n        }\n\n        this.setState({\n            studentCountForPastFailure: studentCount,\n            g1GradeFailure: g1Grade,\n            g2GradeFailure: g2Grade,\n            g3GradeFailure: g3Grade,\n        });\n    }\n\n    checkStudyTime(queryArray) {\n        const reducer = (a, b) => parseInt(a) + parseInt(b);\n        const filterQuery = {};\n        const studentCount = {};\n\n        for (const item of queryArray) {\n            let curr = filterQuery[item.studytime];\n            if (curr == null) {\n                curr = [];\n                filterQuery[item.studytime] = curr;\n            }\n            curr.push(item.G3);\n        }\n\n        for (const [key, value] of Object.entries(filterQuery)) {\n            const sum = value.reduce(reducer);\n            const average = sum / value.length;\n            filterQuery[key] = Math.round(average * 100) / 100;\n        }\n\n        for (const item of queryArray) {\n            if (studentCount[item.studytime] != null) {\n                studentCount[item.studytime]++;\n            } else {\n                studentCount[item.studytime] = 1;\n            }\n        }\n\n        this.setState({\n            avgGradeForStudyTime: filterQuery,\n            studentCountForStudyTime: studentCount,\n        });\n    }\n\n    healthCorrelationToGrade(queryArray) {\n        const firstPeriodGrade = {};\n        const secondPeriodGrade = {};\n        const finalGrade = {};\n\n        queryArray.forEach((item) => {\n            if (firstPeriodGrade[item.health] == null) {\n                firstPeriodGrade[item.health] = [];\n            }\n            firstPeriodGrade[item.health].push(item.G1);\n\n            if (secondPeriodGrade[item.health] == null) {\n                secondPeriodGrade[item.health] = [];\n            }\n            secondPeriodGrade[item.health].push(item.G2);\n\n            if (finalGrade[item.health] == null) {\n                finalGrade[item.health] = [];\n            }\n            finalGrade[item.health].push(item.G3);\n        });\n\n        for (const [key, value] of Object.entries(firstPeriodGrade)) {\n            const firstPeriodJSON = firstPeriodGrade[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = firstPeriodJSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n\n            const average = sum / value.length;\n            firstPeriodGrade[key] = Math.round(average * 100) / 100;\n        }\n\n        for (const [key, value] of Object.entries(secondPeriodGrade)) {\n            const secondPeriodJSON = secondPeriodGrade[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = secondPeriodJSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n\n            const average = sum / value.length;\n\n            secondPeriodGrade[key] = Math.round(average * 100) / 100;\n        }\n\n        for (const [key, value] of Object.entries(finalGrade)) {\n            const finalGradeJSON = finalGrade[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = finalGradeJSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n\n            const average = sum / value.length;\n            finalGrade[key] = Math.round(average * 100) / 100;\n        }\n\n        this.setState({\n            firstPeriodAverage: firstPeriodGrade,\n            secondPeriodAverage: secondPeriodGrade,\n            finalPeriodAverage: finalGrade,\n        });\n    }\n\n    alcoholConsumption(queryArray) {\n        // Grades based on workday alcohol consumption\n        const firstPeriodGradeDalc = {};\n        const secondPeriodGradeDalc = {};\n        const finalGradeDalc = {};\n\n        // Grades based on weekend alcohol consumption\n        const firstPeriodGradeWalc = {};\n        const secondPeriodGradeWalc = {};\n        const finalGradeWalc = {};\n\n        // Array generation for workday consumption\n        queryArray.forEach((item) => {\n            if (firstPeriodGradeDalc[item.Dalc] == null) {\n                firstPeriodGradeDalc[item.Dalc] = [];\n            }\n            firstPeriodGradeDalc[item.Dalc].push(item.G1);\n\n            if (secondPeriodGradeDalc[item.Dalc] == null) {\n                secondPeriodGradeDalc[item.Dalc] = [];\n            }\n            secondPeriodGradeDalc[item.Dalc].push(item.G2);\n\n            if (finalGradeDalc[item.Dalc] == null) {\n                finalGradeDalc[item.Dalc] = [];\n            }\n            finalGradeDalc[item.Dalc].push(item.G3);\n        });\n\n        // Array generation for weekend consumption\n        queryArray.forEach((item) => {\n            if (firstPeriodGradeWalc[item.Walc] == null) {\n                firstPeriodGradeWalc[item.Walc] = [];\n            }\n            firstPeriodGradeWalc[item.Walc].push(item.G1);\n\n            if (secondPeriodGradeWalc[item.Walc] == null) {\n                secondPeriodGradeWalc[item.Walc] = [];\n            }\n            secondPeriodGradeWalc[item.Walc].push(item.G2);\n\n            if (finalGradeWalc[item.Walc] == null) {\n                finalGradeWalc[item.Walc] = [];\n            }\n            finalGradeWalc[item.Walc].push(item.G3);\n        });\n\n        for (const [key, value] of Object.entries(firstPeriodGradeDalc)) {\n            const firstPeriodDalcJSON = firstPeriodGradeDalc[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = firstPeriodDalcJSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n\n            const average = sum / value.length;\n            firstPeriodGradeDalc[key] = Math.round(average * 100) / 100;\n        }\n\n        for (const [key, value] of Object.entries(secondPeriodGradeDalc)) {\n            const secondPeriodDalcJSON = secondPeriodGradeDalc[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = secondPeriodDalcJSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n\n            const average = sum / value.length;\n            secondPeriodGradeDalc[key] = Math.round(average * 100) / 100;\n        }\n\n        for (const [key, value] of Object.entries(finalGradeDalc)) {\n            const finalDalcJSON = finalGradeDalc[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = finalDalcJSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n\n            const average = sum / value.length;\n            finalGradeDalc[key] = Math.round(average * 100) / 100;\n        }\n\n        for (const [key, value] of Object.entries(firstPeriodGradeWalc)) {\n            const firstPeriodWalcJSON = firstPeriodGradeWalc[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = firstPeriodWalcJSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n\n            const average = sum / value.length;\n            firstPeriodGradeWalc[key] = Math.round(average * 100) / 100;\n        }\n\n        for (const [key, value] of Object.entries(secondPeriodGradeWalc)) {\n            const secondPeriodWalcJSON = secondPeriodGradeWalc[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = secondPeriodWalcJSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n\n            const average = sum / value.length;\n            secondPeriodGradeWalc[key] = Math.round(average * 100) / 100;\n        }\n\n        for (const [key, value] of Object.entries(finalGradeWalc)) {\n            const finalWalcJSON = finalGradeWalc[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = finalWalcJSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n\n            const average = sum / value.length;\n            finalGradeWalc[key] = Math.round(average * 100) / 100;\n        }\n\n        this.setState({\n            firstPeriodAverageDalc: firstPeriodGradeDalc,\n            secondPeriodAverageDalc: secondPeriodGradeDalc,\n            finalPeriodAverageDalc: finalGradeDalc,\n\n            firstPeriodAverageWalc: firstPeriodGradeWalc,\n            secondPeriodAverageWalc: secondPeriodGradeWalc,\n            finalPeriodAverageWalc: finalGradeWalc,\n        });\n    }\n\n    affectedByHealth(queryArray) {\n        const reducer = (a, b) => parseInt(a) + parseInt(b);\n        const studyTime = {};\n        const studentCount = {};\n\n        queryArray.forEach((item) => {\n            if (studyTime[item.health] == null) {\n                studyTime[item.health] = [];\n            }\n            studyTime[item.health].push(item.studytime);\n        });\n\n        for (const [key, value] of Object.entries(studyTime)) {\n            const sum = value.reduce(reducer);\n            const average = sum / value.length;\n            studyTime[key] = Math.round(average * 100) / 100;\n        }\n\n        for (const item of queryArray) {\n            if (studentCount[item.health] != null) {\n                studentCount[item.health]++;\n            } else {\n                studentCount[item.health] = 1;\n            }\n        }\n\n        this.setState({\n            studyTimeHealth: studyTime,\n            studentCountForHealth: studentCount,\n        });\n    }\n\n    travelTime(queryArray) {\n        const reducer = (a, b) => parseInt(a) + parseInt(b);\n        const g1Grade = {};\n        const g2Grade = {};\n        const g3Grade = {};\n        const studentCount = {};\n\n        queryArray.forEach((item) => {\n            if (g1Grade[item.traveltime] == null) {\n                g1Grade[item.traveltime] = [];\n            }\n            g1Grade[item.traveltime].push(item.G1);\n\n            if (g2Grade[item.traveltime] == null) {\n                g2Grade[item.traveltime] = [];\n            }\n            g2Grade[item.traveltime].push(item.G2);\n\n            if (g3Grade[item.traveltime] == null) {\n                g3Grade[item.traveltime] = [];\n            }\n            g3Grade[item.traveltime].push(item.G3);\n        });\n\n        for (const [key, value] of Object.entries(g1Grade)) {\n            const g1GradeJSON = g1Grade[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = g1GradeJSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n            const average = sum / value.length;\n            g1Grade[key] = Math.round(average * 100) / 100;\n        }\n\n        for (const [key, value] of Object.entries(g2Grade)) {\n            const g2GradeJSON = g2Grade[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = g2GradeJSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n            const average = sum / value.length;\n            g2Grade[key] = Math.round(average * 100) / 100;\n        }\n\n        for (const [key, value] of Object.entries(g3Grade)) {\n            const g3GradeJSON = g3Grade[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = g3GradeJSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n            const average = sum / value.length;\n            g3Grade[key] = Math.round(average * 100) / 100;\n        }\n\n        for (const item of queryArray) {\n            if (studentCount[item.traveltime] != null) {\n                studentCount[item.traveltime]++;\n            } else {\n                studentCount[item.traveltime] = 1;\n            }\n        }\n\n        this.setState({\n            g1GradeTravelTime: g1Grade,\n            g2GradeTravelTime: g2Grade,\n            g3GradeTravelTime: g3Grade,\n            travelTimeStudentCount: studentCount,\n        });\n    }\n\n    checkAbsences(queryArray) {\n        const reducer = (a, b) => parseInt(a) + parseInt(b);\n        const absenceGrade = {};\n        queryArray.forEach((item) => {\n            if (absenceGrade[item.absences] == null) {\n                absenceGrade[item.absences] = [];\n            }\n            absenceGrade[item.absences].push(item.G3);\n        });\n\n        for (const [key, value] of Object.entries(absenceGrade)) {\n            const sum = value.reduce(reducer);\n            const average = sum / value.length;\n            absenceGrade[key] = Math.round(average * 100) / 100;\n        }\n\n        this.setState({ absenceAverage: absenceGrade });\n    }\n\n    goOutTest(queryArray) {\n        const reducer = (a, b) => parseInt(a) + parseInt(b);\n        const goOutGrade = {};\n        queryArray.forEach((item) => {\n            if (goOutGrade[item.goout] == null) {\n                goOutGrade[item.goout] = [];\n            }\n            goOutGrade[item.goout].push(item.G3);\n        });\n\n        for (const [key, value] of Object.entries(goOutGrade)) {\n            const sum = value.reduce(reducer);\n            const average = sum / value.length;\n            goOutGrade[key] = Math.round(average * 100) / 100;\n        }\n\n        this.setState({ goOutAvg: goOutGrade });\n    }\n\n    extraPaidClasses(queryArray) {\n        const reducer = (a, b) => parseInt(a) + parseInt(b);\n        const extraPaidClasses = [];\n        const noExtraPaidClasses = [];\n\n        queryArray.forEach((item) => {\n            if (item.paid === '\"yes\"') {\n                extraPaidClasses.push(item.G3);\n            }\n\n            if (item.paid === '\"no\"') {\n                noExtraPaidClasses.push(item.G3);\n            }\n        });\n\n        const sumForExtraPaidClasses = extraPaidClasses.reduce(reducer);\n\n        const roundedGrade1 =\n            Math.round(\n                (sumForExtraPaidClasses / extraPaidClasses.length) * 10,\n            ) / 10;\n\n        const sumForNoExtraPaidClasses = noExtraPaidClasses.reduce(reducer);\n\n        const roundedGrade2 =\n            Math.round(\n                (sumForNoExtraPaidClasses / noExtraPaidClasses.length) * 10,\n            ) / 10;\n\n        this.setState({\n            extraPaidClassesAvg: roundedGrade1,\n            studentCountWithExtraPaidClasses: extraPaidClasses.length,\n            noExtraPaidClassesAvg: roundedGrade2,\n            studentCountWithoutExtraPaidClasses: noExtraPaidClasses.length,\n        });\n    }\n\n    render() {\n        const graphs = [\n            {\n                name: 'Internet Access',\n                component: (\n                    <InternetGraph\n                        accessAvg={this.state.internetAccessAvg}\n                        studentCountWithAccess={\n                            this.state.studentCountWithAccess\n                        }\n                        noAccessAvg={this.state.noInternetAccessAvg}\n                        studentCountWithoutAccess={\n                            this.state.studentCountWithoutAccess\n                        }\n                    />\n                ),\n            },\n            {\n                name: 'Extra Paid Classes',\n                component: (\n                    <ExtraPaidClassesGraph\n                        extraPaidClassesAvg={this.state.extraPaidClassesAvg}\n                        studentCountWithExtraPaidClasses={\n                            this.state.studentCountWithExtraPaidClasses\n                        }\n                        noExtraPaidClassesAvg={this.state.noExtraPaidClassesAvg}\n                        studentCountWithoutExtraPaidClasses={\n                            this.state.studentCountWithoutExtraPaidClasses\n                        }\n                    />\n                ),\n            },\n            {\n                name: 'Past Failures',\n                component: (\n                    <PastFailures\n                        g1Grade={this.state.g1GradeFailure}\n                        g2Grade={this.state.g2GradeFailure}\n                        g3Grade={this.state.g3GradeFailure}\n                        studentCount={this.state.studentCountForPastFailure}\n                    />\n                ),\n            },\n            {\n                name: 'Study Time',\n                component: (\n                    <StudyTime\n                        studyTimeGrade={this.state.avgGradeForStudyTime}\n                        studentCount={this.state.studentCountForStudyTime}\n                    />\n                ),\n            },\n            {\n                name: 'Alcohol Consumption',\n                component: (\n                    <AlcoholConsumption\n                        g1AverageDalc={this.state.firstPeriodAverageDalc}\n                        g2AverageDalc={this.state.secondPeriodAverageDalc}\n                        g3AverageDalc={this.state.finalPeriodAverageDalc}\n                        g1AverageWalc={this.state.firstPeriodAverageWalc}\n                        g2AverageWalc={this.state.secondPeriodAverageWalc}\n                        g3AverageWalc={this.state.finalPeriodAverageWalc}\n                    />\n                ),\n            },\n            {\n                name: 'Overall Health',\n                component: (\n                    <HealthGraph\n                        g1Average={this.state.firstPeriodAverage}\n                        g2Average={this.state.secondPeriodAverage}\n                        g3Average={this.state.finalPeriodAverage}\n                        studyTime={this.state.studyTimeHealth}\n                        studentCount={this.state.studentCountForHealth}\n                    />\n                ),\n            },\n            {\n                name: 'Travel Time',\n                component: (\n                    <TravelTime\n                        g1Grade={this.state.g1GradeTravelTime}\n                        g2Grade={this.state.g2GradeTravelTime}\n                        g3Grade={this.state.g3GradeTravelTime}\n                        students={this.state.travelTimeStudentCount}\n                    />\n                ),\n            },\n            {\n                name: 'Absence Correlation',\n                component: <AbsenceGraph grades={this.state.absenceAverage} />,\n            },\n            {\n                name: 'Going Out With Friends',\n                component: <GoOut grade={this.state.goOutAvg} />,\n            },\n        ];\n\n        const { activeGraphIndex } = this.state;\n        const activeGraph = graphs[activeGraphIndex];\n\n        return (\n            <div>\n                <ButtonDropdown\n                    isOpen={this.state.dropdownOpen}\n                    toggle={this.toggle}\n                >\n                    <DropdownToggle caret>Select a graph</DropdownToggle>\n                    <DropdownMenu name=\"graph\">\n                        {graphs.map((graph, index) => (\n                            <DropdownItem\n                                value={index}\n                                key={index}\n                                onClick={() => this.handleGraphChange(index)}\n                            >\n                                {graph.name}\n                            </DropdownItem>\n                        ))}\n                    </DropdownMenu>\n                </ButtonDropdown>\n                <section>\n                    {activeGraphIndex >= 0 ? activeGraph.component : ''}\n                </section>\n            </div>\n        );\n    }\n}\n\nexport default DataFetch;\n","import ReactDOM from 'react-dom';\nimport { Container, Row, Col } from 'reactstrap';\nimport DataFetch from './components/DataFetch';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './style/index.css';\n\nconst App = () => {\n    return (\n        <div>\n            <Container fluid>\n                <Row>\n                    <Col>\n                        <div className=\"jumbotron jumbotron-fluid bg-transparent text-gray\">\n                            <div className=\"container\">\n                                <h1 className=\"display-4 d-flex justify-content-center\">\n                                    Student Achievement Comparison\n                                </h1>\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n            </Container>\n\n            <Container>\n                <Row>\n                    <Col>\n                        <DataFetch />\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n};\n\nexport default App;\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}