{"version":3,"sources":["components/Absent.js","components/AlcoholConsumption.js","components/ExtraPaidClassesGraph.js","components/GoOut.js","components/HealthGraph.js","components/InternetGraph.js","components/PastFailures.js","components/StudyTime.js","components/TravelTime.js","config/firebase.js","components/DataFetch.js","index.js"],"names":["AbsenceGraph","props","data","Object","keys","grades","map","key","name","average","Container","className","Row","Col","ScatterChart","width","height","margin","top","right","bottom","left","style","fontSize","CartesianGrid","XAxis","dataKey","Label","value","offset","position","YAxis","angle","Scatter","fill","Tooltip","cursor","strokeDasharray","AlcoholConsumption","dataDalc","g1","g1AverageDalc","g2","g2AverageDalc","g3","g3AverageDalc","dataWalc","g1AverageWalc","g2AverageWalc","g3AverageWalc","BarChart","interval","Legend","verticalAlign","layout","align","Bar","barSize","LabelList","ExtraPaidClassesGraph","averageWithExtraPaidClasses","extraPaidClassesAvg","showExtraPaidClasses","averageWithoutExtraPaidClasses","noExtraPaidClassesAvg","showNoExtraPaidClasses","studentCountWithExtraPaidClasses","stackId","background","studentCountWithoutExtraPaidClasses","GoOut","grade","CustomTooltip","active","payload","length","RadialBarChart","cx","cy","innerRadius","outerRadius","startAngle","endAngle","RadialBar","minAngle","label","clockWise","iconSize","wrapperStyle","lineHeight","content","HealthGraph","colors","data1","g1Average","g2Average","g3Average","studentCount","studyTime","PieChart","Pie","entry","index","Cell","InternetGraph","averageWithInternet","accessAvg","showAccess","averageWithoutInternet","noAccessAvg","showNoAccess","studentCountWithAccess","studentCountWithoutAccess","PastFailures","g1Grade","g2Grade","g3Grade","type","StudyTime","groupOneStudents","studyTimeGrade","groupTwoStudents","groupThreeStudents","groupFourStudents","TravelTime","students","baground","app","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","DataFetch","toggle","setState","dropdownOpen","state","activeGraphIndex","noInternetAccessAvg","internetAccessAvg","studentCountForPastFailure","g1GradeFailure","g2GradeFailure","g3GradeFailure","avgGradeForStudyTime","studentCountForStudyTime","firstPeriodAverage","secondPeriodAverage","finalPeriodAverage","studyTimeHealth","studentCountForHealth","g1GradeTravelTime","g2GradeTravelTime","g3GradeTravelTime","travelTimeStudentCount","absenceAverage","goOutAvg","workDayAlcoholAvg","weekendAlcoholAvg","internetAccess","bind","handleGraphChange","checkPastFailures","checkStudyTime","healthCorrelationToGrade","affectedByHealth","travelTime","checkAbsences","goOutTest","extraPaidClasses","alcoholConsumption","_this","this","queryArray","ref","once","then","snapshot","forEach","childSnapshot","push","val","reducer","a","b","parseInt","noInternet","hasInternet","item","internet","G3","sumForInternet","reduce","roundedGrade1","Math","round","sumForNoInternet","roundedGrade2","failures","G1","G2","entries","i","JSON","parse","acc","filterQuery","curr","studytime","firstPeriodGrade","secondPeriodGrade","finalGrade","health","firstPeriodGradeDalc","secondPeriodGradeDalc","finalGradeDalc","firstPeriodGradeWalc","secondPeriodGradeWalc","finalGradeWalc","Dalc","Walc","firstPeriodAverageDalc","secondPeriodAverageDalc","finalPeriodAverageDalc","firstPeriodAverageWalc","secondPeriodAverageWalc","finalPeriodAverageWalc","traveltime","absenceGrade","absences","goOutGrade","goout","noExtraPaidClasses","paid","sumForExtraPaidClasses","sumForNoExtraPaidClasses","graphs","component","activeGraph","ButtonDropdown","isOpen","DropdownToggle","caret","DropdownMenu","graph","DropdownItem","onClick","Component","App","fluid","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.869e4942.chunk.js","sourcesContent":["import {\n    CartesianGrid,\n    XAxis,\n    YAxis,\n    Tooltip,\n    Scatter,\n    ScatterChart,\n    Label,\n} from 'recharts';\nimport { Container, Row, Col } from 'reactstrap';\n\nconst AbsenceGraph = (props) => {\n    const data = Object.keys(props.grades).map((key) => ({\n        name: key,\n        average: props.grades[key],\n    }));\n\n    return (\n        <Container className=\"d-flex justify-content-center\">\n            <Row>\n                <Col>\n                    <h3 className=\"title-center\">Absence Correlation</h3>\n                    <ScatterChart\n                        width={1300}\n                        height={500}\n                        margin={{ top: 20, right: 20, bottom: 30, left: 20 }}\n                        style={{ fontSize: 20 }}\n                    >\n                        <CartesianGrid />\n                        <XAxis dataKey={'name'} name=\"absences\">\n                            <Label\n                                value=\"absences\"\n                                offset={2}\n                                position=\"bottom\"\n                                style={{ fontSize: 25 }}\n                            />\n                        </XAxis>\n                        <YAxis dataKey={'average'} name=\"average grade\">\n                            <Label\n                                value=\"average grade\"\n                                angle={-90}\n                                position=\"left\"\n                                style={{ fontSize: 25 }}\n                            />\n                        </YAxis>\n                        <Scatter name=\"averages\" data={data} fill=\"#8884d8\" />\n                        <Tooltip cursor={{ strokeDasharray: '3 3' }} />\n                    </ScatterChart>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default AbsenceGraph;\n","import {\n    BarChart,\n    CartesianGrid,\n    XAxis,\n    YAxis,\n    Tooltip,\n    Legend,\n    Bar,\n    Label,\n    LabelList,\n} from 'recharts';\nimport { Container, Row, Col } from 'reactstrap';\n\nconst AlcoholConsumption = (props) => {\n    const dataDalc = [\n        {\n            name: 1,\n            g1: props.g1AverageDalc[1],\n            g2: props.g2AverageDalc[1],\n            g3: props.g3AverageDalc[1],\n        },\n        {\n            name: 2,\n            g1: props.g1AverageDalc[2],\n            g2: props.g2AverageDalc[2],\n            g3: props.g3AverageDalc[2],\n        },\n        {\n            name: 3,\n            g1: props.g1AverageDalc[3],\n            g2: props.g2AverageDalc[3],\n            g3: props.g3AverageDalc[3],\n        },\n        {\n            name: 4,\n            g1: props.g1AverageDalc[4],\n            g2: props.g2AverageDalc[4],\n            g3: props.g3AverageDalc[4],\n        },\n        {\n            name: 5,\n            g1: props.g1AverageDalc[5],\n            g2: props.g2AverageDalc[5],\n            g3: props.g3AverageDalc[5],\n        },\n    ];\n\n    const dataWalc = [\n        {\n            name: 1,\n            g1: props.g1AverageWalc[1],\n            g2: props.g2AverageWalc[1],\n            g3: props.g3AverageWalc[1],\n        },\n        {\n            name: 2,\n            g1: props.g1AverageWalc[2],\n            g2: props.g2AverageWalc[2],\n            g3: props.g3AverageWalc[2],\n        },\n        {\n            name: 3,\n            g1: props.g1AverageWalc[3],\n            g2: props.g2AverageWalc[3],\n            g3: props.g3AverageWalc[3],\n        },\n        {\n            name: 4,\n            g1: props.g1AverageWalc[4],\n            g2: props.g2AverageWalc[4],\n            g3: props.g3AverageWalc[4],\n        },\n        {\n            name: 5,\n            g1: props.g1AverageWalc[5],\n            g2: props.g2AverageWalc[5],\n            g3: props.g3AverageWalc[5],\n        },\n    ];\n\n    return (\n        <div>\n            <Container className=\"d-flex justify-content-center\">\n                <Row>\n                    <Col>\n                        <h3 className=\"title-center\">\n                            Workday Alcohol Consumption\n                        </h3>\n                        <BarChart\n                            width={1200}\n                            height={400}\n                            data={dataDalc}\n                            margin={{ bottom: 50, top: 20 }}\n                            style={{ fontSize: 18 }}\n                        >\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"name\">\n                                <Label\n                                    value=\"Low to High alcohol consumption\"\n                                    offset={0}\n                                    position=\"bottom\"\n                                    style={{ fontSize: 20 }}\n                                />\n                            </XAxis>\n                            <YAxis interval={0}>\n                                <Label\n                                    value=\"average grade\"\n                                    angle={-90}\n                                    position=\"insideLeft\"\n                                    style={{ fontSize: 20 }}\n                                />\n                            </YAxis>\n                            <Tooltip />\n                            <Legend\n                                verticalAlign=\"middle\"\n                                layout=\"vertical\"\n                                align=\"right\"\n                            />\n                            <Bar\n                                name=\"1st Period Grade\"\n                                dataKey=\"g1\"\n                                fill=\"#008000\"\n                                barSize={50}\n                            >\n                                <LabelList dataKey=\"g1\" position=\"top\" />\n                            </Bar>\n\n                            <Bar\n                                name=\"2nd Period Grade\"\n                                dataKey=\"g2\"\n                                fill=\" #00a700\"\n                                barSize={50}\n                            >\n                                <LabelList dataKey=\"g2\" position=\"top\" />\n                            </Bar>\n\n                            <Bar\n                                name=\"Final Grade\"\n                                dataKey=\"g3\"\n                                fill=\"#00c400\"\n                                barSize={50}\n                            >\n                                <LabelList dataKey=\"g3\" position=\"top\" />\n                            </Bar>\n                        </BarChart>\n                    </Col>\n                    <Col>\n                        <h3 className=\"title-center\">\n                            Weekend Alcohol Consumption\n                        </h3>\n                        <BarChart\n                            width={1200}\n                            height={400}\n                            data={dataWalc}\n                            margin={{ bottom: 50, top: 20 }}\n                            style={{ fontSize: 18 }}\n                        >\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"name\">\n                                <Label\n                                    value=\"Low to High alcohol consumption\"\n                                    offset={0}\n                                    position=\"bottom\"\n                                    style={{ fontSize: 20 }}\n                                />\n                            </XAxis>\n                            <YAxis interval={0}>\n                                <Label\n                                    value=\"average grade\"\n                                    angle={-90}\n                                    position=\"insideLeft\"\n                                    style={{ fontSize: 20 }}\n                                />\n                            </YAxis>\n                            <Tooltip />\n                            <Legend\n                                verticalAlign=\"middle\"\n                                layout=\"vertical\"\n                                align=\"right\"\n                            />\n                            <Bar\n                                name=\"1st Period Grade\"\n                                dataKey=\"g1\"\n                                fill=\"#008000\"\n                                barSize={50}\n                            >\n                                <LabelList dataKey=\"g1\" position=\"top\" />\n                            </Bar>\n\n                            <Bar\n                                name=\"2nd Period Grade\"\n                                dataKey=\"g2\"\n                                fill=\" #00a700\"\n                                barSize={50}\n                            >\n                                <LabelList dataKey=\"g2\" position=\"top\" />\n                            </Bar>\n\n                            <Bar\n                                name=\"Final Grade\"\n                                dataKey=\"g3\"\n                                fill=\"#00c400\"\n                                barSize={50}\n                            >\n                                <LabelList dataKey=\"g3\" position=\"top\" />\n                            </Bar>\n                        </BarChart>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n};\n\nexport default AlcoholConsumption;\n","import {\n    BarChart,\n    Bar,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    LabelList,\n    Label,\n} from 'recharts';\nimport { Container, Col, Row } from 'reactstrap';\n\nconst ExtraPaidClassesGraph = (props) => {\n    const data = [\n        {\n            name: 'Extra Paid Classes',\n            averageWithExtraPaidClasses: props.extraPaidClassesAvg,\n            showExtraPaidClasses: props.extraPaidClassesAvg,\n        },\n        {\n            name: 'No Extra Paid Classes',\n            averageWithoutExtraPaidClasses: props.noExtraPaidClassesAvg,\n            showNoExtraPaidClasses: props.noExtraPaidClassesAvg,\n        },\n        {\n            name: 'Comparison',\n            averageWithExtraPaidClasses: props.extraPaidClassesAvg,\n            averageWithoutExtraPaidClasses: props.noExtraPaidClassesAvg,\n        },\n    ];\n\n    return (\n        <div>\n            <Container className=\"d-flex justify-content-center\">\n                <Row>\n                    <Col>\n                        <h3 className=\"title-center\">Extra Paid Classes</h3>\n                        <BarChart\n                            width={1000}\n                            height={450}\n                            data={data}\n                            margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                            style={{ fontSize: 20 }}\n                        >\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"name\" />\n                            <YAxis>\n                                <Label\n                                    value=\"average grade\"\n                                    angle={-90}\n                                    position=\"insideLeft\"\n                                />\n                            </YAxis>\n\n                            <Tooltip />\n                            <Legend />\n                            <Bar\n                                name={\n                                    props.studentCountWithExtraPaidClasses +\n                                    ' students w/ extra paid classes'\n                                }\n                                dataKey=\"averageWithExtraPaidClasses\"\n                                stackId=\"a\"\n                                fill=\"#7DAB24\"\n                                background={{ fill: '#eee' }}\n                                barSize={80}\n                            >\n                                <LabelList\n                                    dataKey=\"showExtraPaidClasses\"\n                                    position=\"top\"\n                                />\n                            </Bar>\n                            <Bar\n                                name={\n                                    props.studentCountWithoutExtraPaidClasses +\n                                    ' students w/o extra paid classes'\n                                }\n                                dataKey=\"averageWithoutExtraPaidClasses\"\n                                stackId=\"a\"\n                                fill=\"#AB2439\"\n                            >\n                                <LabelList\n                                    dataKey=\"showNoExtraPaidClasses\"\n                                    position=\"top\"\n                                />\n                            </Bar>\n                        </BarChart>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n};\n\nexport default ExtraPaidClassesGraph;\n","import { RadialBar, RadialBarChart, Legend, Tooltip } from 'recharts';\nimport { Container, Row, Col } from 'reactstrap';\n\nconst GoOut = (props) => {\n    const data = [\n        {\n            name: [1, ', very low frequency'],\n            average: props.grade[1],\n            fill: '#8884d8',\n        },\n        {\n            name: 2,\n            average: props.grade[2],\n            fill: '#83a6ed',\n        },\n        {\n            name: 3,\n            average: props.grade[3],\n            fill: '#8dd1e1',\n        },\n        {\n            name: 4,\n            average: props.grade[4],\n            fill: '#82ca9d',\n        },\n        {\n            name: [5, ', very high frequency'],\n            average: props.grade[5],\n            fill: '#ff6666',\n        },\n    ];\n\n    const style = {\n        top: 50,\n        left: 600,\n        lineHeight: '24px',\n    };\n    const CustomTooltip = ({ active, payload }) => {\n        if (active && payload && payload.length) {\n            return (\n                <div className=\"custom-tooltip\">\n                    <p className=\"label\">{`${payload[0].value}`}</p>\n                </div>\n            );\n        }\n        return null;\n    };\n\n    return (\n        <Container className=\"d-flex justify-content-center\">\n            <Row>\n                <Col>\n                    <h3 className=\"title-center\">Going Out With Friends</h3>\n                    <RadialBarChart\n                        width={800}\n                        height={500}\n                        cx={300}\n                        cy={400}\n                        innerRadius={'10%'}\n                        outerRadius={'300'}\n                        barSize={'16'}\n                        data={data}\n                        startAngle={180}\n                        endAngle={0}\n                        style={{ fontSize: 25 }}\n                        margin={{ right: 1000 }}\n                    >\n                        <RadialBar\n                            minAngle={15}\n                            label={{ fill: '#000' }}\n                            background={{ fill: '#eee' }}\n                            clockWise={true}\n                            dataKey=\"average\"\n                        />\n                        <Legend\n                            iconSize={10}\n                            width={400}\n                            height={140}\n                            layout=\"vertical\"\n                            verticalAlign=\"middle\"\n                            wrapperStyle={style}\n                        />\n                        <Tooltip content={<CustomTooltip />} />\n                    </RadialBarChart>\n\n                    <p className=\"h2 d-flex justify-content-center\">\n                        Average Grades\n                    </p>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default GoOut;\n","import {\n    BarChart,\n    CartesianGrid,\n    XAxis,\n    YAxis,\n    Tooltip,\n    Legend,\n    Bar,\n    Label,\n    PieChart,\n    Pie,\n    Cell,\n    LabelList,\n} from 'recharts';\nimport { Container, Row, Col } from 'reactstrap';\n\nconst HealthGraph = (props) => {\n    const colors = ['#cc0000', '#FF0000', '#ff8205', '#00af00', ' #00c463'];\n\n    const data1 = [\n        {\n            name: 1,\n            g1: props.g1Average[1],\n            g2: props.g2Average[1],\n            g3: props.g3Average[1],\n        },\n        {\n            name: 2,\n            g1: props.g1Average[2],\n            g2: props.g2Average[2],\n            g3: props.g3Average[2],\n        },\n        {\n            name: 3,\n            g1: props.g1Average[3],\n            g2: props.g2Average[3],\n            g3: props.g3Average[3],\n        },\n        {\n            name: 4,\n            g1: props.g1Average[4],\n            g2: props.g2Average[4],\n            g3: props.g3Average[4],\n        },\n        {\n            name: 5,\n            g1: props.g1Average[5],\n            g2: props.g2Average[5],\n            g3: props.g3Average[5],\n        },\n    ];\n\n    const data = [\n        {\n            name: props.studentCount[1] + ' students (1)',\n            value: props.studyTime[1],\n        },\n        {\n            name: props.studentCount[2] + ' students (2)',\n            value: props.studyTime[2],\n        },\n        {\n            name: props.studentCount[3] + ' students (3)',\n            value: props.studyTime[3],\n        },\n        {\n            name: props.studentCount[4] + ' students (4)',\n            value: props.studyTime[4],\n        },\n        {\n            name: props.studentCount[5] + ' students (5)',\n            value: props.studyTime[5],\n        },\n    ];\n\n    return (\n        <div>\n            <Container className=\"d-flex justify-content-center\">\n                <Row>\n                    <Col>\n                        <h3 className=\"title-center\">Overall Health</h3>\n                        <BarChart\n                            width={1000}\n                            height={400}\n                            data={data1}\n                            margin={{ bottom: 60 }}\n                            style={{ fontSize: 18 }}\n                        >\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"name\">\n                                <Label\n                                    value=\"health ranked from the worst, 1 to the best, 5\"\n                                    offset={0}\n                                    position=\"bottom\"\n                                    style={{ fontSize: 20 }}\n                                />\n                            </XAxis>\n                            <YAxis interval={0}>\n                                <Label\n                                    value=\"average grade\"\n                                    angle={-90}\n                                    position=\"insideLeft\"\n                                    style={{ fontSize: 20 }}\n                                />\n                            </YAxis>\n                            <Tooltip />\n                            <Legend\n                                verticalAlign=\"middle\"\n                                layout=\"vertical\"\n                                align=\"right\"\n                            />\n                            <Bar\n                                name=\"1st Period Grade\"\n                                dataKey=\"g1\"\n                                fill=\"#007a00\"\n                                barSize={70}\n                            >\n                                <LabelList dataKey=\"g1\" position=\"top\" />\n                            </Bar>\n\n                            <Bar\n                                name=\"2nd Period Grade\"\n                                dataKey=\"g2\"\n                                fill=\" #00a700\"\n                                barSize={70}\n                            >\n                                <LabelList dataKey=\"g2\" position=\"top\" />\n                            </Bar>\n\n                            <Bar\n                                name=\"Final Grade\"\n                                dataKey=\"g3\"\n                                fill=\"#00c400\"\n                                barSize={70}\n                            >\n                                <LabelList dataKey=\"g3\" position=\"top\" />\n                            </Bar>\n                        </BarChart>\n\n                        <h3 className=\"title-center\">\n                            Study Time Impact On Health\n                        </h3>\n                        <PieChart\n                            width={730}\n                            height={250}\n                            style={{ fontSize: 20 }}\n                        >\n                            <Pie\n                                data={data}\n                                cx=\"50%\"\n                                cy=\"50%\"\n                                dataKey=\"value\"\n                                outerRadius={80}\n                                innerRadius={60}\n                                label\n                            >\n                                {data.map((entry, index) => (\n                                    <Cell\n                                        key={`cell-${index}`}\n                                        fill={colors[index]}\n                                    />\n                                ))}\n\n                                <Label\n                                    value=\"study time\"\n                                    position=\"center\"\n                                    style={{ fontSize: 20 }}\n                                />\n                            </Pie>\n                            <Tooltip />\n                            <Legend\n                                verticalAlign=\"middle\"\n                                layout=\"vertical\"\n                                align=\"right\"\n                            />\n                        </PieChart>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n};\n\nexport default HealthGraph;\n","import {\n    BarChart,\n    Bar,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    LabelList,\n    Label,\n} from 'recharts';\nimport { Container, Col, Row } from 'reactstrap';\n\nconst InternetGraph = (props) => {\n    const data = [\n        {\n            name: 'Internet Access',\n            averageWithInternet: props.accessAvg,\n            showAccess: props.accessAvg,\n        },\n        {\n            name: 'No Internet Access',\n            averageWithoutInternet: props.noAccessAvg,\n            showNoAccess: props.noAccessAvg,\n        },\n        {\n            name: 'Comparison',\n            averageWithInternet: props.accessAvg,\n            averageWithoutInternet: props.noAccessAvg,\n        },\n    ];\n\n    return (\n        <div>\n            <Container className=\"d-flex justify-content-center\">\n                <Row>\n                    <Col>\n                        <h3 className=\"title-center\">Internet Access</h3>\n                        <BarChart\n                            width={1000}\n                            height={500}\n                            data={data}\n                            margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                            style={{ fontSize: 20 }}\n                        >\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"name\" />\n                            <YAxis>\n                                <Label\n                                    value=\"average grade\"\n                                    angle={-90}\n                                    position=\"insideLeft\"\n                                />\n                            </YAxis>\n\n                            <Tooltip />\n                            <Legend />\n\n                            <Bar\n                                name={\n                                    props.studentCountWithAccess +\n                                    ' students w/ internet'\n                                }\n                                dataKey=\"averageWithInternet\"\n                                stackId=\"a\"\n                                fill=\"#7DAB24\"\n                                barSize={80}\n                                background={{ fill: '#eee' }}\n                            >\n                                <LabelList\n                                    dataKey=\"showAccess\"\n                                    position=\"top\"\n                                />\n                            </Bar>\n                            <Bar\n                                name={\n                                    props.studentCountWithoutAccess +\n                                    ' students w/o internet'\n                                }\n                                dataKey=\"averageWithoutInternet\"\n                                stackId=\"a\"\n                                fill=\"#AB2439\"\n                            >\n                                <LabelList\n                                    dataKey=\"showNoAccess\"\n                                    position=\"top\"\n                                />\n                            </Bar>\n                        </BarChart>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n};\n\nexport default InternetGraph;\n","import {\n    CartesianGrid,\n    XAxis,\n    YAxis,\n    Legend,\n    Tooltip,\n    LabelList,\n    Bar,\n    BarChart,\n    Label,\n} from 'recharts';\nimport { Container, Row, Col } from 'reactstrap';\n\nconst PastFailures = (props) => {\n    const data1 = [\n        {\n            name: 0,\n            g1: props.g1Grade[0],\n            g2: props.g2Grade[0],\n            g3: props.g3Grade[0],\n        },\n        {\n            name: 1,\n            g1: props.g1Grade[1],\n            g2: props.g2Grade[1],\n            g3: props.g3Grade[1],\n        },\n        {\n            name: 2,\n            g1: props.g1Grade[2],\n            g2: props.g2Grade[2],\n            g3: props.g3Grade[2],\n        },\n        {\n            name: 3,\n            g1: props.g1Grade[3],\n            g2: props.g2Grade[3],\n            g3: props.g3Grade[3],\n        },\n    ];\n\n    return (\n        <Container className=\"d-flex justify-content-center\">\n            <Row>\n                <Col>\n                    <h3 className=\"title-center\">Past Failuires</h3>\n                    <BarChart\n                        width={1300}\n                        height={500}\n                        data={data1}\n                        layout=\"vertical\"\n                        margin={{ top: 20, bottom: 130, left: 30 }}\n                        style={{ fontSize: 20 }}\n                    >\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis type=\"number\">\n                            <Label\n                                value=\"average grade\"\n                                offset={0}\n                                position=\"bottom\"\n                                style={{ fontSize: 20 }}\n                            />\n\n                            <Label\n                                value={\n                                    props.studentCount[0] + ' students - (0)'\n                                }\n                                offset={40}\n                                position=\"bottom\"\n                                style={{ fontSize: 20 }}\n                            />\n                            <Label\n                                value={\n                                    props.studentCount[1] + ' students - (1)'\n                                }\n                                offset={60}\n                                position=\"bottom\"\n                                style={{ fontSize: 20 }}\n                            />\n                            <Label\n                                value={\n                                    props.studentCount[2] + ' students - (2)'\n                                }\n                                offset={80}\n                                position=\"bottom\"\n                                style={{ fontSize: 20 }}\n                            />\n                            <Label\n                                value={\n                                    props.studentCount[3] + ' students - (3)'\n                                }\n                                offset={100}\n                                position=\"bottom\"\n                                style={{ fontSize: 20 }}\n                            />\n                        </XAxis>\n                        <YAxis dataKey=\"name\" type=\"category\">\n                            <Label\n                                value=\"past failures\"\n                                angle={-90}\n                                position=\"insideLeft\"\n                                style={{ fontSize: 25 }}\n                            />\n                        </YAxis>\n                        <Tooltip />\n                        <Legend\n                            verticalAlign=\"middle\"\n                            layout=\"vertical\"\n                            align=\"right\"\n                        />\n\n                        <Bar\n                            name=\"1st Period Grade\"\n                            dataKey=\"g1\"\n                            fill=\"#cc0000\"\n                            barSize={70}\n                        >\n                            <LabelList\n                                dataKey=\"g1\"\n                                position=\"inside\"\n                                style={{ fontSize: 20 }}\n                            />\n                        </Bar>\n\n                        <Bar\n                            name=\"2nd Period Grade\"\n                            dataKey=\"g2\"\n                            fill=\"#ff1a1a\"\n                            barSize={70}\n                        >\n                            <LabelList\n                                dataKey=\"g2\"\n                                position=\"inside\"\n                                style={{ fontSize: 20 }}\n                            />\n                        </Bar>\n\n                        <Bar\n                            name=\"Final Grade\"\n                            dataKey=\"g3\"\n                            fill=\"#ff8080\"\n                            barSize={70}\n                        >\n                            <LabelList\n                                dataKey=\"g3\"\n                                position=\"inside\"\n                                style={{ fontSize: 20 }}\n                            />\n                        </Bar>\n                    </BarChart>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default PastFailures;\n","import { PieChart, Pie, Cell, Tooltip, Legend, Label } from 'recharts';\nimport { Container, Row, Col } from 'reactstrap';\n\nconst StudyTime = (props) => {\n    const groupOneStudents = props.studyTimeGrade[1];\n    const groupTwoStudents = props.studyTimeGrade[2];\n    const groupThreeStudents = props.studyTimeGrade[3];\n    const groupFourStudents = props.studyTimeGrade[4];\n\n    const colors = ['#6ea3f7', '#2674f2', '#0a47a9', '#1D0AA9'];\n\n    const data = [\n        {\n            name: props.studentCount[1] + ' students, <2 hrs',\n            value: groupOneStudents,\n        },\n        {\n            name: props.studentCount[2] + ' students, 2 - 5 hrs',\n            value: groupTwoStudents,\n        },\n        {\n            name: props.studentCount[3] + ' students, 5 - 10 hrs',\n            value: groupThreeStudents,\n        },\n        {\n            name: props.studentCount[4] + ' students, >10 hrs',\n            value: groupFourStudents,\n        },\n    ];\n\n    return (\n        <Container className=\"d-flex justify-content-center\">\n            <Row>\n                <Col>\n                    <h3 className=\"title-center\">Study Time</h3>\n                    <PieChart width={730} height={250} style={{ fontSize: 25 }}>\n                        <Pie\n                            data={data}\n                            cx=\"50%\"\n                            cy=\"50%\"\n                            dataKey=\"value\"\n                            outerRadius={80}\n                            innerRadius={60}\n                            label\n                        >\n                            {data.map((entry, index) => (\n                                <Cell\n                                    key={`cell-${index}`}\n                                    fill={colors[index]}\n                                />\n                            ))}\n\n                            <Label\n                                value=\"avg grade\"\n                                position=\"center\"\n                                style={{ fontSize: 20 }}\n                            />\n                        </Pie>\n                        <Tooltip />\n                        <Legend\n                            verticalAlign=\"middle\"\n                            layout=\"vertical\"\n                            align=\"right\"\n                        />\n                    </PieChart>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default StudyTime;\n","import {\n    CartesianGrid,\n    XAxis,\n    YAxis,\n    Label,\n    Tooltip,\n    BarChart,\n    Bar,\n    LabelList,\n    Legend,\n} from 'recharts';\nimport { Container, Row, Col } from 'reactstrap';\n\nconst TravelTime = (props) => {\n    const data = [\n        {\n            name: 1,\n            g1: props.g1Grade[1],\n            g2: props.g2Grade[1],\n            g3: props.g3Grade[1],\n        },\n        {\n            name: 2,\n            g1: props.g1Grade[2],\n            g2: props.g2Grade[2],\n            g3: props.g3Grade[2],\n        },\n        {\n            name: 3,\n            g1: props.g1Grade[3],\n            g2: props.g2Grade[3],\n            g3: props.g3Grade[3],\n        },\n        {\n            name: 4,\n            g1: props.g1Grade[4],\n            g2: props.g2Grade[4],\n            g3: props.g3Grade[4],\n        },\n    ];\n\n    return (\n        <Container className=\"d-flex justify-content-center\">\n            <Row>\n                <Col>\n                    <h3 className=\"title-center\">Travel Time</h3>\n                    <BarChart\n                        width={1000}\n                        height={400}\n                        data={data}\n                        margin={{ bottom: 80 }}\n                        style={{ fontSize: 18 }}\n                    >\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"name\">\n                            <Label\n                                value={\n                                    props.students[1] +\n                                    ' students; travel-time: <15 min (1)'\n                                }\n                                offset={0}\n                                position=\"bottom\"\n                                style={{ fontSize: 20 }}\n                            />\n                            <Label\n                                value={\n                                    props.students[2] +\n                                    ' students; travel-time: 15 to 30 min (2)'\n                                }\n                                offset={20}\n                                position=\"bottom\"\n                                style={{ fontSize: 20 }}\n                            />\n                            <Label\n                                value={\n                                    props.students[3] +\n                                    ' students; travel-time: 30 min to 1 hr (3)'\n                                }\n                                offset={40}\n                                position=\"bottom\"\n                                style={{ fontSize: 20 }}\n                            />\n                            <Label\n                                value={\n                                    props.students[4] +\n                                    ' students; travel-time: >1 hr (4)'\n                                }\n                                offset={60}\n                                position=\"bottom\"\n                                style={{ fontSize: 20 }}\n                            />\n                        </XAxis>\n                        <YAxis>\n                            <Label\n                                value=\"average grade\"\n                                angle={-90}\n                                position=\"insideLeft\"\n                                style={{ fontSize: 20 }}\n                            />\n                        </YAxis>\n                        <Tooltip />\n                        <Legend\n                            verticalAlign=\"middle\"\n                            layout=\"vertical\"\n                            align=\"right\"\n                            baground={{ fill: '#000' }}\n                        />\n                        <Bar\n                            name=\"1st Period Grade\"\n                            dataKey=\"g1\"\n                            fill=\"#1AE5B3\"\n                            barSize={70}\n                        >\n                            <LabelList dataKey=\"g1\" position=\"top\" />\n                        </Bar>\n\n                        <Bar\n                            name=\"2nd Period Grade\"\n                            dataKey=\"g2\"\n                            fill=\"#1AB1E5\"\n                            barSize={70}\n                        >\n                            <LabelList dataKey=\"g2\" position=\"top\" />\n                        </Bar>\n\n                        <Bar\n                            name=\"Final Grade\"\n                            dataKey=\"g3\"\n                            fill=\"#1AE54E\"\n                            barSize={70}\n                        >\n                            <LabelList dataKey=\"g3\" position=\"top\" />\n                        </Bar>\n                    </BarChart>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default TravelTime;\n","// Import the functions you need from the SDKs you need\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\n// https://firebase.google.com/docs/web/setup#available-libraries\n\nconst firebaseConfig = {\n    apiKey: 'AIzaSyBL7_C48_5DuMjMJ1eDRx_xxeB_L-S5-H4',\n    authDomain: 'gmt-assignment.firebaseapp.com',\n    databaseURL: 'https://gmt-assignment-default-rtdb.firebaseio.com/',\n    projectId: 'gmt-assignment',\n    storageBucket: 'gmt-assignment.appspot.com',\n    messagingSenderId: '532049500680',\n    appId: '1:532049500680:web:e0955543b3ace7e6c64fbd',\n    measurementId: 'G-922B5JWL94',\n};\n\n// Initialize Firebase\nconst app = firebase.initializeApp(firebaseConfig);\n\n// Initialize database\nconst database = firebase.database();\n\nexport default { app, database };\n","import { Component } from 'react';\nimport AbsenceGraph from './Absent';\nimport AlcoholConsumption from './AlcoholConsumption.js';\nimport ExtraPaidClassesGraph from './ExtraPaidClassesGraph';\nimport GoOut from './GoOut';\nimport HealthGraph from './HealthGraph';\nimport InternetGraph from './InternetGraph';\nimport PastFailures from './PastFailures';\nimport StudyTime from './StudyTime';\nimport TravelTime from './TravelTime';\nimport database from '../config/firebase.js';\nimport {\n    ButtonDropdown,\n    DropdownToggle,\n    DropdownItem,\n    DropdownMenu,\n} from 'reactstrap';\n\n/* eslint-disable */\nclass DataFetch extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            activeGraphIndex: -1,\n            noInternetAccessAvg: 0,\n            internetAccessAvg: 0,\n            studentCountWithAccess: 0,\n            studentCountWithoutAccess: 0,\n            dropdownOpen: false,\n            studentCountForPastFailure: {},\n            g1GradeFailure: {},\n            g2GradeFailure: {},\n            g3GradeFailure: {},\n            avgGradeForStudyTime: {},\n            studentCountForStudyTime: {},\n            firstPeriodAverage: {},\n            secondPeriodAverage: {},\n            finalPeriodAverage: {},\n            studyTimeHealth: {},\n            studentCountForHealth: {},\n            g1GradeTravelTime: {},\n            g2GradeTravelTime: {},\n            g3GradeTravelTime: {},\n            travelTimeStudentCount: {},\n            absenceAverage: {},\n            goOutAvg: {},\n            extraPaidClassesAvg: 0,\n            noExtraPaidClassesAvg: 0,\n            studentCountWithExtraPaidClasses: 0,\n            studentCountWithoutExtraPaidClasses: 0,\n            workDayAlcoholAvg: {},\n            weekendAlcoholAvg: {},\n        };\n        this.internetAccess = this.internetAccess.bind(this);\n        this.handleGraphChange = this.handleGraphChange.bind(this);\n        this.checkPastFailures = this.checkPastFailures.bind(this);\n        this.checkStudyTime = this.checkStudyTime.bind(this);\n        this.healthCorrelationToGrade =\n            this.healthCorrelationToGrade.bind(this);\n        this.affectedByHealth = this.affectedByHealth.bind(this);\n        this.travelTime = this.travelTime.bind(this);\n        this.checkAbsences = this.checkAbsences.bind(this);\n        this.goOutTest = this.goOutTest.bind(this);\n        this.extraPaidClasses = this.extraPaidClasses.bind(this);\n        this.alcoholConsumption = this.alcoholConsumption.bind(this);\n    }\n\n    componentDidMount() {\n        const _this = this;\n        const queryArray = [];\n        const query = database.database.ref();\n\n        query.once('value').then((snapshot) => {\n            snapshot.forEach((childSnapshot) => {\n                queryArray.push(childSnapshot.val());\n            });\n            _this.internetAccess(queryArray);\n            _this.checkPastFailures(queryArray);\n            _this.checkStudyTime(queryArray);\n            _this.healthCorrelationToGrade(queryArray);\n            _this.affectedByHealth(queryArray);\n            _this.travelTime(queryArray);\n            _this.checkAbsences(queryArray);\n            _this.goOutTest(queryArray);\n            _this.extraPaidClasses(queryArray);\n            _this.alcoholConsumption(queryArray);\n        });\n    }\n\n    handleGraphChange(value) {\n        this.setState({ activeGraphIndex: value });\n    }\n\n    toggle = () => {\n        this.setState({\n            dropdownOpen: !this.state.dropdownOpen,\n        });\n    };\n\n    internetAccess(queryArray) {\n        const reducer = (a, b) => parseInt(a) + parseInt(b);\n        const noInternet = [];\n        const hasInternet = [];\n\n        // From queryArray, push item to either hasInternet or noInternet arrays\n        queryArray.forEach((item) => {\n            if (item.internet === '\"yes\"') {\n                hasInternet.push(item.G3);\n            }\n            if (item.internet === '\"no\"') {\n                noInternet.push(item.G3);\n            }\n        });\n\n        // Remove commas and add each together\n        const sumForInternet = hasInternet.reduce(reducer);\n\n        // Rounding for decimal accuracy\n        const roundedGrade1 =\n            Math.round((sumForInternet / hasInternet.length) * 10) / 10;\n\n        // Remove commas and add each together\n        const sumForNoInternet = noInternet.reduce(reducer);\n\n        // Rounding for decimal accuracy\n        const roundedGrade2 =\n            Math.round((sumForNoInternet / noInternet.length) * 10) / 10;\n\n        // Set state for each property\n        this.setState({\n            internetAccessAvg: roundedGrade1,\n            studentCountWithAccess: hasInternet.length,\n            noInternetAccessAvg: roundedGrade2,\n            studentCountWithoutAccess: noInternet.length,\n        });\n    }\n\n    checkPastFailures(queryArray) {\n        const g1Grade = {};\n        const g2Grade = {};\n        const g3Grade = {};\n        const studentCount = {};\n\n        queryArray.forEach((item) => {\n            if (g1Grade[item.failures] == null) {\n                g1Grade[item.failures] = [];\n            }\n            g1Grade[item.failures].push(item.G1);\n\n            if (g2Grade[item.failures] == null) {\n                g2Grade[item.failures] = [];\n            }\n            g2Grade[item.failures].push(item.G2);\n\n            if (g3Grade[item.failures] == null) {\n                g3Grade[item.failures] = [];\n            }\n            g3Grade[item.failures].push(item.G3);\n        });\n\n        // Deal with g1 and g2 being strings rather than numbers by converting to JSON before reducing\n        for (const [key, value] of Object.entries(g1Grade)) {\n            const g1JSON = g1Grade[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = g1JSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n            const average = sum / value.length;\n            g1Grade[key] = Math.round(average * 10) / 10;\n        }\n\n        for (const [key, value] of Object.entries(g2Grade)) {\n            const g2JSON = g2Grade[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = g2JSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n            const average = sum / value.length;\n            g2Grade[key] = Math.round(average * 10) / 10;\n        }\n\n        for (const [key, value] of Object.entries(g3Grade)) {\n            const g3JSON = g3Grade[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = g3JSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n            const average = sum / value.length;\n            g3Grade[key] = Math.round(average * 10) / 10;\n        }\n\n        for (const item of queryArray) {\n            if (studentCount[item.failures] != null) {\n                studentCount[item.failures]++;\n            } else {\n                studentCount[item.failures] = 1;\n            }\n        }\n\n        this.setState({\n            studentCountForPastFailure: studentCount,\n            g1GradeFailure: g1Grade,\n            g2GradeFailure: g2Grade,\n            g3GradeFailure: g3Grade,\n        });\n    }\n\n    checkStudyTime(queryArray) {\n        const reducer = (a, b) => parseInt(a) + parseInt(b);\n        const filterQuery = {};\n        const studentCount = {};\n\n        for (const item of queryArray) {\n            let curr = filterQuery[item.studytime];\n            if (curr == null) {\n                curr = [];\n                filterQuery[item.studytime] = curr;\n            }\n            curr.push(item.G3);\n        }\n\n        for (const [key, value] of Object.entries(filterQuery)) {\n            const sum = value.reduce(reducer);\n            const average = sum / value.length;\n            filterQuery[key] = Math.round(average * 100) / 100;\n        }\n\n        for (const item of queryArray) {\n            if (studentCount[item.studytime] != null) {\n                studentCount[item.studytime]++;\n            } else {\n                studentCount[item.studytime] = 1;\n            }\n        }\n\n        this.setState({\n            avgGradeForStudyTime: filterQuery,\n            studentCountForStudyTime: studentCount,\n        });\n    }\n\n    healthCorrelationToGrade(queryArray) {\n        const firstPeriodGrade = {};\n        const secondPeriodGrade = {};\n        const finalGrade = {};\n\n        queryArray.forEach((item) => {\n            if (firstPeriodGrade[item.health] == null) {\n                firstPeriodGrade[item.health] = [];\n            }\n            firstPeriodGrade[item.health].push(item.G1);\n\n            if (secondPeriodGrade[item.health] == null) {\n                secondPeriodGrade[item.health] = [];\n            }\n            secondPeriodGrade[item.health].push(item.G2);\n\n            if (finalGrade[item.health] == null) {\n                finalGrade[item.health] = [];\n            }\n            finalGrade[item.health].push(item.G3);\n        });\n\n        for (const [key, value] of Object.entries(firstPeriodGrade)) {\n            const firstPeriodJSON = firstPeriodGrade[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = firstPeriodJSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n\n            const average = sum / value.length;\n            firstPeriodGrade[key] = Math.round(average * 100) / 100;\n        }\n\n        for (const [key, value] of Object.entries(secondPeriodGrade)) {\n            const secondPeriodJSON = secondPeriodGrade[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = secondPeriodJSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n\n            const average = sum / value.length;\n\n            secondPeriodGrade[key] = Math.round(average * 100) / 100;\n        }\n\n        for (const [key, value] of Object.entries(finalGrade)) {\n            const finalGradeJSON = finalGrade[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = finalGradeJSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n\n            const average = sum / value.length;\n            finalGrade[key] = Math.round(average * 100) / 100;\n        }\n\n        this.setState({\n            firstPeriodAverage: firstPeriodGrade,\n            secondPeriodAverage: secondPeriodGrade,\n            finalPeriodAverage: finalGrade,\n        });\n    }\n\n    alcoholConsumption(queryArray) {\n        // Grades based on workday alcohol consumption\n        const firstPeriodGradeDalc = {};\n        const secondPeriodGradeDalc = {};\n        const finalGradeDalc = {};\n\n        // Grades based on weekend alcohol consumption\n        const firstPeriodGradeWalc = {};\n        const secondPeriodGradeWalc = {};\n        const finalGradeWalc = {};\n\n        // Array generation for workday consumption\n        queryArray.forEach((item) => {\n            if (firstPeriodGradeDalc[item.Dalc] == null) {\n                firstPeriodGradeDalc[item.Dalc] = [];\n            }\n            firstPeriodGradeDalc[item.Dalc].push(item.G1);\n\n            if (secondPeriodGradeDalc[item.Dalc] == null) {\n                secondPeriodGradeDalc[item.Dalc] = [];\n            }\n            secondPeriodGradeDalc[item.Dalc].push(item.G2);\n\n            if (finalGradeDalc[item.Dalc] == null) {\n                finalGradeDalc[item.Dalc] = [];\n            }\n            finalGradeDalc[item.Dalc].push(item.G3);\n        });\n\n        // Array generation for weekend consumption\n        queryArray.forEach((item) => {\n            if (firstPeriodGradeWalc[item.Walc] == null) {\n                firstPeriodGradeWalc[item.Walc] = [];\n            }\n            firstPeriodGradeWalc[item.Walc].push(item.G1);\n\n            if (secondPeriodGradeWalc[item.Walc] == null) {\n                secondPeriodGradeWalc[item.Walc] = [];\n            }\n            secondPeriodGradeWalc[item.Walc].push(item.G2);\n\n            if (finalGradeWalc[item.Walc] == null) {\n                finalGradeWalc[item.Walc] = [];\n            }\n            finalGradeWalc[item.Walc].push(item.G3);\n        });\n\n        for (const [key, value] of Object.entries(firstPeriodGradeDalc)) {\n            const firstPeriodDalcJSON = firstPeriodGradeDalc[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = firstPeriodDalcJSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n\n            const average = sum / value.length;\n            firstPeriodGradeDalc[key] = Math.round(average * 100) / 100;\n        }\n\n        for (const [key, value] of Object.entries(secondPeriodGradeDalc)) {\n            const secondPeriodDalcJSON = secondPeriodGradeDalc[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = secondPeriodDalcJSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n\n            const average = sum / value.length;\n            secondPeriodGradeDalc[key] = Math.round(average * 100) / 100;\n        }\n\n        for (const [key, value] of Object.entries(finalGradeDalc)) {\n            const finalDalcJSON = finalGradeDalc[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = finalDalcJSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n\n            const average = sum / value.length;\n            finalGradeDalc[key] = Math.round(average * 100) / 100;\n        }\n\n        for (const [key, value] of Object.entries(firstPeriodGradeWalc)) {\n            const firstPeriodWalcJSON = firstPeriodGradeWalc[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = firstPeriodWalcJSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n\n            const average = sum / value.length;\n            firstPeriodGradeWalc[key] = Math.round(average * 100) / 100;\n        }\n\n        for (const [key, value] of Object.entries(secondPeriodGradeWalc)) {\n            const secondPeriodWalcJSON = secondPeriodGradeWalc[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = secondPeriodWalcJSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n\n            const average = sum / value.length;\n            secondPeriodGradeWalc[key] = Math.round(average * 100) / 100;\n        }\n\n        for (const [key, value] of Object.entries(finalGradeWalc)) {\n            const finalWalcJSON = finalGradeWalc[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = finalWalcJSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n\n            const average = sum / value.length;\n            finalGradeWalc[key] = Math.round(average * 100) / 100;\n        }\n\n        this.setState({\n            firstPeriodAverageDalc: firstPeriodGradeDalc,\n            secondPeriodAverageDalc: secondPeriodGradeDalc,\n            finalPeriodAverageDalc: finalGradeDalc,\n\n            firstPeriodAverageWalc: firstPeriodGradeWalc,\n            secondPeriodAverageWalc: secondPeriodGradeWalc,\n            finalPeriodAverageWalc: finalGradeWalc,\n        });\n    }\n\n    affectedByHealth(queryArray) {\n        const reducer = (a, b) => parseInt(a) + parseInt(b);\n        const studyTime = {};\n        const studentCount = {};\n\n        queryArray.forEach((item) => {\n            if (studyTime[item.health] == null) {\n                studyTime[item.health] = [];\n            }\n            studyTime[item.health].push(item.studytime);\n        });\n\n        for (const [key, value] of Object.entries(studyTime)) {\n            const sum = value.reduce(reducer);\n            const average = sum / value.length;\n            studyTime[key] = Math.round(average * 100) / 100;\n        }\n\n        for (const item of queryArray) {\n            if (studentCount[item.health] != null) {\n                studentCount[item.health]++;\n            } else {\n                studentCount[item.health] = 1;\n            }\n        }\n\n        this.setState({\n            studyTimeHealth: studyTime,\n            studentCountForHealth: studentCount,\n        });\n    }\n\n    travelTime(queryArray) {\n        const reducer = (a, b) => parseInt(a) + parseInt(b);\n        const g1Grade = {};\n        const g2Grade = {};\n        const g3Grade = {};\n        const studentCount = {};\n\n        queryArray.forEach((item) => {\n            if (g1Grade[item.traveltime] == null) {\n                g1Grade[item.traveltime] = [];\n            }\n            g1Grade[item.traveltime].push(item.G1);\n\n            if (g2Grade[item.traveltime] == null) {\n                g2Grade[item.traveltime] = [];\n            }\n            g2Grade[item.traveltime].push(item.G2);\n\n            if (g3Grade[item.traveltime] == null) {\n                g3Grade[item.traveltime] = [];\n            }\n            g3Grade[item.traveltime].push(item.G3);\n        });\n\n        for (const [key, value] of Object.entries(g1Grade)) {\n            const g1GradeJSON = g1Grade[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = g1GradeJSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n            const average = sum / value.length;\n            g1Grade[key] = Math.round(average * 100) / 100;\n        }\n\n        for (const [key, value] of Object.entries(g2Grade)) {\n            const g2GradeJSON = g2Grade[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = g2GradeJSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n            const average = sum / value.length;\n            g2Grade[key] = Math.round(average * 100) / 100;\n        }\n\n        for (const [key, value] of Object.entries(g3Grade)) {\n            const g3GradeJSON = g3Grade[key].map((i) => {\n                return JSON.parse(i);\n            });\n            const sum = g3GradeJSON.reduce(\n                (acc, i) => acc + parseInt(JSON.parse(i)),\n                0,\n            );\n            const average = sum / value.length;\n            g3Grade[key] = Math.round(average * 100) / 100;\n        }\n\n        for (const item of queryArray) {\n            if (studentCount[item.traveltime] != null) {\n                studentCount[item.traveltime]++;\n            } else {\n                studentCount[item.traveltime] = 1;\n            }\n        }\n\n        this.setState({\n            g1GradeTravelTime: g1Grade,\n            g2GradeTravelTime: g2Grade,\n            g3GradeTravelTime: g3Grade,\n            travelTimeStudentCount: studentCount,\n        });\n    }\n\n    checkAbsences(queryArray) {\n        const reducer = (a, b) => parseInt(a) + parseInt(b);\n        const absenceGrade = {};\n        queryArray.forEach((item) => {\n            if (absenceGrade[item.absences] == null) {\n                absenceGrade[item.absences] = [];\n            }\n            absenceGrade[item.absences].push(item.G3);\n        });\n\n        for (const [key, value] of Object.entries(absenceGrade)) {\n            const sum = value.reduce(reducer);\n            const average = sum / value.length;\n            absenceGrade[key] = Math.round(average * 100) / 100;\n        }\n\n        this.setState({ absenceAverage: absenceGrade });\n    }\n\n    goOutTest(queryArray) {\n        const reducer = (a, b) => parseInt(a) + parseInt(b);\n        const goOutGrade = {};\n        queryArray.forEach((item) => {\n            if (goOutGrade[item.goout] == null) {\n                goOutGrade[item.goout] = [];\n            }\n            goOutGrade[item.goout].push(item.G3);\n        });\n\n        for (const [key, value] of Object.entries(goOutGrade)) {\n            const sum = value.reduce(reducer);\n            const average = sum / value.length;\n            goOutGrade[key] = Math.round(average * 100) / 100;\n        }\n\n        this.setState({ goOutAvg: goOutGrade });\n    }\n\n    extraPaidClasses(queryArray) {\n        const reducer = (a, b) => parseInt(a) + parseInt(b);\n        const extraPaidClasses = [];\n        const noExtraPaidClasses = [];\n\n        queryArray.forEach((item) => {\n            if (item.paid === '\"yes\"') {\n                extraPaidClasses.push(item.G3);\n            }\n\n            if (item.paid === '\"no\"') {\n                noExtraPaidClasses.push(item.G3);\n            }\n        });\n\n        const sumForExtraPaidClasses = extraPaidClasses.reduce(reducer);\n\n        const roundedGrade1 =\n            Math.round(\n                (sumForExtraPaidClasses / extraPaidClasses.length) * 10,\n            ) / 10;\n\n        const sumForNoExtraPaidClasses = noExtraPaidClasses.reduce(reducer);\n\n        const roundedGrade2 =\n            Math.round(\n                (sumForNoExtraPaidClasses / noExtraPaidClasses.length) * 10,\n            ) / 10;\n\n        this.setState({\n            extraPaidClassesAvg: roundedGrade1,\n            studentCountWithExtraPaidClasses: extraPaidClasses.length,\n            noExtraPaidClassesAvg: roundedGrade2,\n            studentCountWithoutExtraPaidClasses: noExtraPaidClasses.length,\n        });\n    }\n\n    render() {\n        const graphs = [\n            {\n                name: 'Internet Access',\n                component: (\n                    <InternetGraph\n                        accessAvg={this.state.internetAccessAvg}\n                        studentCountWithAccess={\n                            this.state.studentCountWithAccess\n                        }\n                        noAccessAvg={this.state.noInternetAccessAvg}\n                        studentCountWithoutAccess={\n                            this.state.studentCountWithoutAccess\n                        }\n                    />\n                ),\n            },\n            {\n                name: 'Past Failures',\n                component: (\n                    <PastFailures\n                        g1Grade={this.state.g1GradeFailure}\n                        g2Grade={this.state.g2GradeFailure}\n                        g3Grade={this.state.g3GradeFailure}\n                        studentCount={this.state.studentCountForPastFailure}\n                    />\n                ),\n            },\n            {\n                name: 'Study Time',\n                component: (\n                    <StudyTime\n                        studyTimeGrade={this.state.avgGradeForStudyTime}\n                        studentCount={this.state.studentCountForStudyTime}\n                    />\n                ),\n            },\n            {\n                name: 'Overall Health',\n                component: (\n                    <HealthGraph\n                        g1Average={this.state.firstPeriodAverage}\n                        g2Average={this.state.secondPeriodAverage}\n                        g3Average={this.state.finalPeriodAverage}\n                        studyTime={this.state.studyTimeHealth}\n                        studentCount={this.state.studentCountForHealth}\n                    />\n                ),\n            },\n            {\n                name: 'Travel Time',\n                component: (\n                    <TravelTime\n                        g1Grade={this.state.g1GradeTravelTime}\n                        g2Grade={this.state.g2GradeTravelTime}\n                        g3Grade={this.state.g3GradeTravelTime}\n                        students={this.state.travelTimeStudentCount}\n                    />\n                ),\n            },\n            {\n                name: 'Absence Correlation',\n                component: <AbsenceGraph grades={this.state.absenceAverage} />,\n            },\n            {\n                name: 'Going Out With Friends',\n                component: <GoOut grade={this.state.goOutAvg} />,\n            },\n            {\n                name: 'Extra Paid Classes',\n                component: (\n                    <ExtraPaidClassesGraph\n                        extraPaidClassesAvg={this.state.extraPaidClassesAvg}\n                        studentCountWithExtraPaidClasses={\n                            this.state.studentCountWithExtraPaidClasses\n                        }\n                        noExtraPaidClassesAvg={this.state.noExtraPaidClassesAvg}\n                        studentCountWithoutExtraPaidClasses={\n                            this.state.studentCountWithoutExtraPaidClasses\n                        }\n                    />\n                ),\n            },\n            {\n                name: 'Alcohol Consumption',\n                component: (\n                    <AlcoholConsumption\n                        g1AverageDalc={this.state.firstPeriodAverageDalc}\n                        g2AverageDalc={this.state.secondPeriodAverageDalc}\n                        g3AverageDalc={this.state.finalPeriodAverageDalc}\n                        g1AverageWalc={this.state.firstPeriodAverageWalc}\n                        g2AverageWalc={this.state.secondPeriodAverageWalc}\n                        g3AverageWalc={this.state.finalPeriodAverageWalc}\n                    />\n                ),\n            },\n        ];\n\n        const { activeGraphIndex } = this.state;\n        const activeGraph = graphs[activeGraphIndex];\n\n        return (\n            <div>\n                <ButtonDropdown\n                    isOpen={this.state.dropdownOpen}\n                    toggle={this.toggle}\n                >\n                    <DropdownToggle caret>Select a graph</DropdownToggle>\n                    <DropdownMenu name=\"graph\">\n                        {graphs.map((graph, index) => (\n                            <DropdownItem\n                                value={index}\n                                key={index}\n                                onClick={() => this.handleGraphChange(index)}\n                            >\n                                {graph.name}\n                            </DropdownItem>\n                        ))}\n                    </DropdownMenu>\n                </ButtonDropdown>\n                <section>\n                    {activeGraphIndex >= 0 ? activeGraph.component : ''}\n                </section>\n            </div>\n        );\n    }\n}\n\nexport default DataFetch;\n","import ReactDOM from 'react-dom';\nimport { Container, Row, Col } from 'reactstrap';\nimport DataFetch from './components/DataFetch';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './style/index.css';\n\nconst App = () => {\n    return (\n        <div>\n            <Container fluid>\n                <Row>\n                    <Col>\n                        <div className=\"jumbotron jumbotron-fluid bg-transparent text-gray\">\n                            <div className=\"container\">\n                                <h1 className=\"display-4 d-flex justify-content-center\">\n                                    Student Achievement Comparison\n                                </h1>\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n            </Container>\n\n            <Container>\n                <Row>\n                    <Col>\n                        <DataFetch />\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n};\n\nexport default App;\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}